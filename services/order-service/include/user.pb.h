// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: user.proto
// Protobuf C++ Version: 5.29.3

#ifndef user_2eproto_2epb_2eh
#define user_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_user_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_user_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_user_2eproto;
namespace user {
class UserIdRequest;
struct UserIdRequestDefaultTypeInternal;
extern UserIdRequestDefaultTypeInternal _UserIdRequest_default_instance_;
class UserMetadataResponse;
struct UserMetadataResponseDefaultTypeInternal;
extern UserMetadataResponseDefaultTypeInternal _UserMetadataResponse_default_instance_;
class WalletResponse;
struct WalletResponseDefaultTypeInternal;
extern WalletResponseDefaultTypeInternal _WalletResponse_default_instance_;
class WalletUpdateRequest;
struct WalletUpdateRequestDefaultTypeInternal;
extern WalletUpdateRequestDefaultTypeInternal _WalletUpdateRequest_default_instance_;
}  // namespace user
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace user {

// ===================================================================


// -------------------------------------------------------------------

class WalletUpdateRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:user.WalletUpdateRequest) */ {
 public:
  inline WalletUpdateRequest() : WalletUpdateRequest(nullptr) {}
  ~WalletUpdateRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WalletUpdateRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WalletUpdateRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WalletUpdateRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline WalletUpdateRequest(const WalletUpdateRequest& from) : WalletUpdateRequest(nullptr, from) {}
  inline WalletUpdateRequest(WalletUpdateRequest&& from) noexcept
      : WalletUpdateRequest(nullptr, std::move(from)) {}
  inline WalletUpdateRequest& operator=(const WalletUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletUpdateRequest& operator=(WalletUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WalletUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WalletUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const WalletUpdateRequest*>(
        &_WalletUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(WalletUpdateRequest& a, WalletUpdateRequest& b) { a.Swap(&b); }
  inline void Swap(WalletUpdateRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WalletUpdateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WalletUpdateRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WalletUpdateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WalletUpdateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WalletUpdateRequest& from) { WalletUpdateRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WalletUpdateRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "user.WalletUpdateRequest"; }

 protected:
  explicit WalletUpdateRequest(::google::protobuf::Arena* arena);
  WalletUpdateRequest(::google::protobuf::Arena* arena, const WalletUpdateRequest& from);
  WalletUpdateRequest(::google::protobuf::Arena* arena, WalletUpdateRequest&& from) noexcept
      : WalletUpdateRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kReasonFieldNumber = 3,
    kAmountChangeFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string reason = 3;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // double amount_change = 2;
  void clear_amount_change() ;
  double amount_change() const;
  void set_amount_change(double value);

  private:
  double _internal_amount_change() const;
  void _internal_set_amount_change(double value);

  public:
  // @@protoc_insertion_point(class_scope:user.WalletUpdateRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      46, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WalletUpdateRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    double amount_change_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class WalletResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:user.WalletResponse) */ {
 public:
  inline WalletResponse() : WalletResponse(nullptr) {}
  ~WalletResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WalletResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WalletResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WalletResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline WalletResponse(const WalletResponse& from) : WalletResponse(nullptr, from) {}
  inline WalletResponse(WalletResponse&& from) noexcept
      : WalletResponse(nullptr, std::move(from)) {}
  inline WalletResponse& operator=(const WalletResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletResponse& operator=(WalletResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WalletResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WalletResponse* internal_default_instance() {
    return reinterpret_cast<const WalletResponse*>(
        &_WalletResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(WalletResponse& a, WalletResponse& b) { a.Swap(&b); }
  inline void Swap(WalletResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WalletResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WalletResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WalletResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WalletResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WalletResponse& from) { WalletResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WalletResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "user.WalletResponse"; }

 protected:
  explicit WalletResponse(::google::protobuf::Arena* arena);
  WalletResponse(::google::protobuf::Arena* arena, const WalletResponse& from);
  WalletResponse(::google::protobuf::Arena* arena, WalletResponse&& from) noexcept
      : WalletResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNewBalanceFieldNumber = 1,
    kAvailableBalanceFieldNumber = 3,
    kUsedMarginFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // double new_balance = 1;
  void clear_new_balance() ;
  double new_balance() const;
  void set_new_balance(double value);

  private:
  double _internal_new_balance() const;
  void _internal_set_new_balance(double value);

  public:
  // double available_balance = 3;
  void clear_available_balance() ;
  double available_balance() const;
  void set_available_balance(double value);

  private:
  double _internal_available_balance() const;
  void _internal_set_available_balance(double value);

  public:
  // double used_margin = 4;
  void clear_used_margin() ;
  double used_margin() const;
  void set_used_margin(double value);

  private:
  double _internal_used_margin() const;
  void _internal_set_used_margin(double value);

  public:
  // bool success = 2;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:user.WalletResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WalletResponse& from_msg);
    double new_balance_;
    double available_balance_;
    double used_margin_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class UserMetadataResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:user.UserMetadataResponse) */ {
 public:
  inline UserMetadataResponse() : UserMetadataResponse(nullptr) {}
  ~UserMetadataResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserMetadataResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserMetadataResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserMetadataResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserMetadataResponse(const UserMetadataResponse& from) : UserMetadataResponse(nullptr, from) {}
  inline UserMetadataResponse(UserMetadataResponse&& from) noexcept
      : UserMetadataResponse(nullptr, std::move(from)) {}
  inline UserMetadataResponse& operator=(const UserMetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserMetadataResponse& operator=(UserMetadataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserMetadataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserMetadataResponse* internal_default_instance() {
    return reinterpret_cast<const UserMetadataResponse*>(
        &_UserMetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(UserMetadataResponse& a, UserMetadataResponse& b) { a.Swap(&b); }
  inline void Swap(UserMetadataResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserMetadataResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserMetadataResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UserMetadataResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserMetadataResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserMetadataResponse& from) { UserMetadataResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UserMetadataResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "user.UserMetadataResponse"; }

 protected:
  explicit UserMetadataResponse(::google::protobuf::Arena* arena);
  UserMetadataResponse(::google::protobuf::Arena* arena, const UserMetadataResponse& from);
  UserMetadataResponse(::google::protobuf::Arena* arena, UserMetadataResponse&& from) noexcept
      : UserMetadataResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kRoleFieldNumber = 2,
    kKycVerifiedFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string role = 2;
  void clear_role() ;
  const std::string& role() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_role(Arg_&& arg, Args_... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* value);

  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(
      const std::string& value);
  std::string* _internal_mutable_role();

  public:
  // bool kyc_verified = 3;
  void clear_kyc_verified() ;
  bool kyc_verified() const;
  void set_kyc_verified(bool value);

  private:
  bool _internal_kyc_verified() const;
  void _internal_set_kyc_verified(bool value);

  public:
  // @@protoc_insertion_point(class_scope:user.UserMetadataResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UserMetadataResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr role_;
    bool kyc_verified_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class UserIdRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:user.UserIdRequest) */ {
 public:
  inline UserIdRequest() : UserIdRequest(nullptr) {}
  ~UserIdRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserIdRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserIdRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserIdRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserIdRequest(const UserIdRequest& from) : UserIdRequest(nullptr, from) {}
  inline UserIdRequest(UserIdRequest&& from) noexcept
      : UserIdRequest(nullptr, std::move(from)) {}
  inline UserIdRequest& operator=(const UserIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserIdRequest& operator=(UserIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserIdRequest* internal_default_instance() {
    return reinterpret_cast<const UserIdRequest*>(
        &_UserIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(UserIdRequest& a, UserIdRequest& b) { a.Swap(&b); }
  inline void Swap(UserIdRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserIdRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserIdRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UserIdRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserIdRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserIdRequest& from) { UserIdRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UserIdRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "user.UserIdRequest"; }

 protected:
  explicit UserIdRequest(::google::protobuf::Arena* arena);
  UserIdRequest(::google::protobuf::Arena* arena, const UserIdRequest& from);
  UserIdRequest(::google::protobuf::Arena* arena, UserIdRequest&& from) noexcept
      : UserIdRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // @@protoc_insertion_point(class_scope:user.UserIdRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      34, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UserIdRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// WalletUpdateRequest

// string user_id = 1;
inline void WalletUpdateRequest::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& WalletUpdateRequest::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.WalletUpdateRequest.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WalletUpdateRequest::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.WalletUpdateRequest.user_id)
}
inline std::string* WalletUpdateRequest::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:user.WalletUpdateRequest.user_id)
  return _s;
}
inline const std::string& WalletUpdateRequest::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void WalletUpdateRequest::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* WalletUpdateRequest::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* WalletUpdateRequest::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.WalletUpdateRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void WalletUpdateRequest::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.WalletUpdateRequest.user_id)
}

// double amount_change = 2;
inline void WalletUpdateRequest::clear_amount_change() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_change_ = 0;
}
inline double WalletUpdateRequest::amount_change() const {
  // @@protoc_insertion_point(field_get:user.WalletUpdateRequest.amount_change)
  return _internal_amount_change();
}
inline void WalletUpdateRequest::set_amount_change(double value) {
  _internal_set_amount_change(value);
  // @@protoc_insertion_point(field_set:user.WalletUpdateRequest.amount_change)
}
inline double WalletUpdateRequest::_internal_amount_change() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_change_;
}
inline void WalletUpdateRequest::_internal_set_amount_change(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_change_ = value;
}

// string reason = 3;
inline void WalletUpdateRequest::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& WalletUpdateRequest::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.WalletUpdateRequest.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WalletUpdateRequest::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.WalletUpdateRequest.reason)
}
inline std::string* WalletUpdateRequest::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:user.WalletUpdateRequest.reason)
  return _s;
}
inline const std::string& WalletUpdateRequest::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void WalletUpdateRequest::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* WalletUpdateRequest::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* WalletUpdateRequest::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.WalletUpdateRequest.reason)
  return _impl_.reason_.Release();
}
inline void WalletUpdateRequest::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.WalletUpdateRequest.reason)
}

// -------------------------------------------------------------------

// WalletResponse

// double new_balance = 1;
inline void WalletResponse::clear_new_balance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_balance_ = 0;
}
inline double WalletResponse::new_balance() const {
  // @@protoc_insertion_point(field_get:user.WalletResponse.new_balance)
  return _internal_new_balance();
}
inline void WalletResponse::set_new_balance(double value) {
  _internal_set_new_balance(value);
  // @@protoc_insertion_point(field_set:user.WalletResponse.new_balance)
}
inline double WalletResponse::_internal_new_balance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_balance_;
}
inline void WalletResponse::_internal_set_new_balance(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_balance_ = value;
}

// bool success = 2;
inline void WalletResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool WalletResponse::success() const {
  // @@protoc_insertion_point(field_get:user.WalletResponse.success)
  return _internal_success();
}
inline void WalletResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:user.WalletResponse.success)
}
inline bool WalletResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void WalletResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// double available_balance = 3;
inline void WalletResponse::clear_available_balance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.available_balance_ = 0;
}
inline double WalletResponse::available_balance() const {
  // @@protoc_insertion_point(field_get:user.WalletResponse.available_balance)
  return _internal_available_balance();
}
inline void WalletResponse::set_available_balance(double value) {
  _internal_set_available_balance(value);
  // @@protoc_insertion_point(field_set:user.WalletResponse.available_balance)
}
inline double WalletResponse::_internal_available_balance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.available_balance_;
}
inline void WalletResponse::_internal_set_available_balance(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.available_balance_ = value;
}

// double used_margin = 4;
inline void WalletResponse::clear_used_margin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.used_margin_ = 0;
}
inline double WalletResponse::used_margin() const {
  // @@protoc_insertion_point(field_get:user.WalletResponse.used_margin)
  return _internal_used_margin();
}
inline void WalletResponse::set_used_margin(double value) {
  _internal_set_used_margin(value);
  // @@protoc_insertion_point(field_set:user.WalletResponse.used_margin)
}
inline double WalletResponse::_internal_used_margin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.used_margin_;
}
inline void WalletResponse::_internal_set_used_margin(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.used_margin_ = value;
}

// -------------------------------------------------------------------

// UserIdRequest

// string user_id = 1;
inline void UserIdRequest::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UserIdRequest::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.UserIdRequest.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserIdRequest::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.UserIdRequest.user_id)
}
inline std::string* UserIdRequest::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:user.UserIdRequest.user_id)
  return _s;
}
inline const std::string& UserIdRequest::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void UserIdRequest::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* UserIdRequest::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* UserIdRequest::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.UserIdRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void UserIdRequest::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.UserIdRequest.user_id)
}

// -------------------------------------------------------------------

// UserMetadataResponse

// string user_id = 1;
inline void UserMetadataResponse::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UserMetadataResponse::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.UserMetadataResponse.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserMetadataResponse::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.UserMetadataResponse.user_id)
}
inline std::string* UserMetadataResponse::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:user.UserMetadataResponse.user_id)
  return _s;
}
inline const std::string& UserMetadataResponse::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void UserMetadataResponse::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* UserMetadataResponse::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* UserMetadataResponse::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.UserMetadataResponse.user_id)
  return _impl_.user_id_.Release();
}
inline void UserMetadataResponse::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.UserMetadataResponse.user_id)
}

// string role = 2;
inline void UserMetadataResponse::clear_role() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.role_.ClearToEmpty();
}
inline const std::string& UserMetadataResponse::role() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.UserMetadataResponse.role)
  return _internal_role();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserMetadataResponse::set_role(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.role_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.UserMetadataResponse.role)
}
inline std::string* UserMetadataResponse::mutable_role() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:user.UserMetadataResponse.role)
  return _s;
}
inline const std::string& UserMetadataResponse::_internal_role() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.role_.Get();
}
inline void UserMetadataResponse::_internal_set_role(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.role_.Set(value, GetArena());
}
inline std::string* UserMetadataResponse::_internal_mutable_role() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.role_.Mutable( GetArena());
}
inline std::string* UserMetadataResponse::release_role() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.UserMetadataResponse.role)
  return _impl_.role_.Release();
}
inline void UserMetadataResponse::set_allocated_role(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.role_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.role_.IsDefault()) {
    _impl_.role_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.UserMetadataResponse.role)
}

// bool kyc_verified = 3;
inline void UserMetadataResponse::clear_kyc_verified() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kyc_verified_ = false;
}
inline bool UserMetadataResponse::kyc_verified() const {
  // @@protoc_insertion_point(field_get:user.UserMetadataResponse.kyc_verified)
  return _internal_kyc_verified();
}
inline void UserMetadataResponse::set_kyc_verified(bool value) {
  _internal_set_kyc_verified(value);
  // @@protoc_insertion_point(field_set:user.UserMetadataResponse.kyc_verified)
}
inline bool UserMetadataResponse::_internal_kyc_verified() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kyc_verified_;
}
inline void UserMetadataResponse::_internal_set_kyc_verified(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kyc_verified_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace user


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // user_2eproto_2epb_2eh
