// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: log_event.proto
// Protobuf C++ Version: 5.29.3

#ifndef log_5fevent_2eproto_2epb_2eh
#define log_5fevent_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_log_5fevent_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_log_5fevent_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_log_5fevent_2eproto;
class FundingEvent;
struct FundingEventDefaultTypeInternal;
extern FundingEventDefaultTypeInternal _FundingEvent_default_instance_;
class LiquidationEvent;
struct LiquidationEventDefaultTypeInternal;
extern LiquidationEventDefaultTypeInternal _LiquidationEvent_default_instance_;
class LogAck;
struct LogAckDefaultTypeInternal;
extern LogAckDefaultTypeInternal _LogAck_default_instance_;
class OrderEvent;
struct OrderEventDefaultTypeInternal;
extern OrderEventDefaultTypeInternal _OrderEvent_default_instance_;
class TradeEvent;
struct TradeEventDefaultTypeInternal;
extern TradeEventDefaultTypeInternal _TradeEvent_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class TradeEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TradeEvent) */ {
 public:
  inline TradeEvent() : TradeEvent(nullptr) {}
  ~TradeEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TradeEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TradeEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TradeEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline TradeEvent(const TradeEvent& from) : TradeEvent(nullptr, from) {}
  inline TradeEvent(TradeEvent&& from) noexcept
      : TradeEvent(nullptr, std::move(from)) {}
  inline TradeEvent& operator=(const TradeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeEvent& operator=(TradeEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradeEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradeEvent* internal_default_instance() {
    return reinterpret_cast<const TradeEvent*>(
        &_TradeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TradeEvent& a, TradeEvent& b) { a.Swap(&b); }
  inline void Swap(TradeEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradeEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TradeEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TradeEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TradeEvent& from) { TradeEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TradeEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "TradeEvent"; }

 protected:
  explicit TradeEvent(::google::protobuf::Arena* arena);
  TradeEvent(::google::protobuf::Arena* arena, const TradeEvent& from);
  TradeEvent(::google::protobuf::Arena* arena, TradeEvent&& from) noexcept
      : TradeEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 1,
    kMakerOrderIdFieldNumber = 2,
    kTakerOrderIdFieldNumber = 3,
    kTimestampFieldNumber = 6,
    kPriceFieldNumber = 4,
    kQuantityFieldNumber = 5,
  };
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string makerOrderId = 2;
  void clear_makerorderid() ;
  const std::string& makerorderid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_makerorderid(Arg_&& arg, Args_... args);
  std::string* mutable_makerorderid();
  PROTOBUF_NODISCARD std::string* release_makerorderid();
  void set_allocated_makerorderid(std::string* value);

  private:
  const std::string& _internal_makerorderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_makerorderid(
      const std::string& value);
  std::string* _internal_mutable_makerorderid();

  public:
  // string takerOrderId = 3;
  void clear_takerorderid() ;
  const std::string& takerorderid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_takerorderid(Arg_&& arg, Args_... args);
  std::string* mutable_takerorderid();
  PROTOBUF_NODISCARD std::string* release_takerorderid();
  void set_allocated_takerorderid(std::string* value);

  private:
  const std::string& _internal_takerorderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_takerorderid(
      const std::string& value);
  std::string* _internal_mutable_takerorderid();

  public:
  // string timestamp = 6;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // double price = 4;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // double quantity = 5;
  void clear_quantity() ;
  double quantity() const;
  void set_quantity(double value);

  private:
  double _internal_quantity() const;
  void _internal_set_quantity(double value);

  public:
  // @@protoc_insertion_point(class_scope:TradeEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TradeEvent& from_msg);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr makerorderid_;
    ::google::protobuf::internal::ArenaStringPtr takerorderid_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    double price_;
    double quantity_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_log_5fevent_2eproto;
};
// -------------------------------------------------------------------

class OrderEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:OrderEvent) */ {
 public:
  inline OrderEvent() : OrderEvent(nullptr) {}
  ~OrderEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OrderEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OrderEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OrderEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline OrderEvent(const OrderEvent& from) : OrderEvent(nullptr, from) {}
  inline OrderEvent(OrderEvent&& from) noexcept
      : OrderEvent(nullptr, std::move(from)) {}
  inline OrderEvent& operator=(const OrderEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderEvent& operator=(OrderEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderEvent* internal_default_instance() {
    return reinterpret_cast<const OrderEvent*>(
        &_OrderEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(OrderEvent& a, OrderEvent& b) { a.Swap(&b); }
  inline void Swap(OrderEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<OrderEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OrderEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OrderEvent& from) { OrderEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OrderEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "OrderEvent"; }

 protected:
  explicit OrderEvent(::google::protobuf::Arena* arena);
  OrderEvent(::google::protobuf::Arena* arena, const OrderEvent& from);
  OrderEvent(::google::protobuf::Arena* arena, OrderEvent&& from) noexcept
      : OrderEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOrderIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kSideFieldNumber = 4,
    kTypeDetailFieldNumber = 5,
    kStatusFieldNumber = 8,
    kTimestampFieldNumber = 9,
    kPriceFieldNumber = 6,
    kQuantityFieldNumber = 7,
  };
  // string orderId = 1;
  void clear_orderid() ;
  const std::string& orderid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_orderid(Arg_&& arg, Args_... args);
  std::string* mutable_orderid();
  PROTOBUF_NODISCARD std::string* release_orderid();
  void set_allocated_orderid(std::string* value);

  private:
  const std::string& _internal_orderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_orderid(
      const std::string& value);
  std::string* _internal_mutable_orderid();

  public:
  // string userId = 2;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string symbol = 3;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string side = 4;
  void clear_side() ;
  const std::string& side() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_side(Arg_&& arg, Args_... args);
  std::string* mutable_side();
  PROTOBUF_NODISCARD std::string* release_side();
  void set_allocated_side(std::string* value);

  private:
  const std::string& _internal_side() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_side(
      const std::string& value);
  std::string* _internal_mutable_side();

  public:
  // string type_detail = 5;
  void clear_type_detail() ;
  const std::string& type_detail() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type_detail(Arg_&& arg, Args_... args);
  std::string* mutable_type_detail();
  PROTOBUF_NODISCARD std::string* release_type_detail();
  void set_allocated_type_detail(std::string* value);

  private:
  const std::string& _internal_type_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_detail(
      const std::string& value);
  std::string* _internal_mutable_type_detail();

  public:
  // string status = 8;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // string timestamp = 9;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // double price = 6;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // double quantity = 7;
  void clear_quantity() ;
  double quantity() const;
  void set_quantity(double value);

  private:
  double _internal_quantity() const;
  void _internal_set_quantity(double value);

  public:
  // @@protoc_insertion_point(class_scope:OrderEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      76, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OrderEvent& from_msg);
    ::google::protobuf::internal::ArenaStringPtr orderid_;
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr side_;
    ::google::protobuf::internal::ArenaStringPtr type_detail_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    double price_;
    double quantity_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_log_5fevent_2eproto;
};
// -------------------------------------------------------------------

class LogAck final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:LogAck) */ {
 public:
  inline LogAck() : LogAck(nullptr) {}
  ~LogAck() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LogAck* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LogAck));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LogAck(
      ::google::protobuf::internal::ConstantInitialized);

  inline LogAck(const LogAck& from) : LogAck(nullptr, from) {}
  inline LogAck(LogAck&& from) noexcept
      : LogAck(nullptr, std::move(from)) {}
  inline LogAck& operator=(const LogAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogAck& operator=(LogAck&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogAck* internal_default_instance() {
    return reinterpret_cast<const LogAck*>(
        &_LogAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(LogAck& a, LogAck& b) { a.Swap(&b); }
  inline void Swap(LogAck* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogAck* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogAck* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LogAck>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogAck& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LogAck& from) { LogAck::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LogAck* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "LogAck"; }

 protected:
  explicit LogAck(::google::protobuf::Arena* arena);
  LogAck(::google::protobuf::Arena* arena, const LogAck& from);
  LogAck(::google::protobuf::Arena* arena, LogAck&& from) noexcept
      : LogAck(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:LogAck)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      22, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LogAck& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_log_5fevent_2eproto;
};
// -------------------------------------------------------------------

class LiquidationEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:LiquidationEvent) */ {
 public:
  inline LiquidationEvent() : LiquidationEvent(nullptr) {}
  ~LiquidationEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LiquidationEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LiquidationEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LiquidationEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline LiquidationEvent(const LiquidationEvent& from) : LiquidationEvent(nullptr, from) {}
  inline LiquidationEvent(LiquidationEvent&& from) noexcept
      : LiquidationEvent(nullptr, std::move(from)) {}
  inline LiquidationEvent& operator=(const LiquidationEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidationEvent& operator=(LiquidationEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LiquidationEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const LiquidationEvent* internal_default_instance() {
    return reinterpret_cast<const LiquidationEvent*>(
        &_LiquidationEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(LiquidationEvent& a, LiquidationEvent& b) { a.Swap(&b); }
  inline void Swap(LiquidationEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidationEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LiquidationEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LiquidationEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LiquidationEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LiquidationEvent& from) { LiquidationEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LiquidationEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "LiquidationEvent"; }

 protected:
  explicit LiquidationEvent(::google::protobuf::Arena* arena);
  LiquidationEvent(::google::protobuf::Arena* arena, const LiquidationEvent& from);
  LiquidationEvent(::google::protobuf::Arena* arena, LiquidationEvent&& from) noexcept
      : LiquidationEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kReasonFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kPnlFieldNumber = 3,
  };
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string symbol = 2;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string reason = 4;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // string timestamp = 5;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // double pnl = 3;
  void clear_pnl() ;
  double pnl() const;
  void set_pnl(double value);

  private:
  double _internal_pnl() const;
  void _internal_set_pnl(double value);

  public:
  // @@protoc_insertion_point(class_scope:LiquidationEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LiquidationEvent& from_msg);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    double pnl_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_log_5fevent_2eproto;
};
// -------------------------------------------------------------------

class FundingEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:FundingEvent) */ {
 public:
  inline FundingEvent() : FundingEvent(nullptr) {}
  ~FundingEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FundingEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FundingEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FundingEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline FundingEvent(const FundingEvent& from) : FundingEvent(nullptr, from) {}
  inline FundingEvent(FundingEvent&& from) noexcept
      : FundingEvent(nullptr, std::move(from)) {}
  inline FundingEvent& operator=(const FundingEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FundingEvent& operator=(FundingEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FundingEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const FundingEvent* internal_default_instance() {
    return reinterpret_cast<const FundingEvent*>(
        &_FundingEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(FundingEvent& a, FundingEvent& b) { a.Swap(&b); }
  inline void Swap(FundingEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FundingEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FundingEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FundingEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FundingEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FundingEvent& from) { FundingEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FundingEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "FundingEvent"; }

 protected:
  explicit FundingEvent(::google::protobuf::Arena* arena);
  FundingEvent(::google::protobuf::Arena* arena, const FundingEvent& from);
  FundingEvent(::google::protobuf::Arena* arena, FundingEvent&& from) noexcept
      : FundingEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 1,
    kTimestampFieldNumber = 5,
    kFundingRateFieldNumber = 2,
    kLongOiFieldNumber = 3,
    kShortOiFieldNumber = 4,
  };
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string timestamp = 5;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // double fundingRate = 2;
  void clear_fundingrate() ;
  double fundingrate() const;
  void set_fundingrate(double value);

  private:
  double _internal_fundingrate() const;
  void _internal_set_fundingrate(double value);

  public:
  // double longOi = 3;
  void clear_longoi() ;
  double longoi() const;
  void set_longoi(double value);

  private:
  double _internal_longoi() const;
  void _internal_set_longoi(double value);

  public:
  // double shortOi = 4;
  void clear_shortoi() ;
  double shortoi() const;
  void set_shortoi(double value);

  private:
  double _internal_shortoi() const;
  void _internal_set_shortoi(double value);

  public:
  // @@protoc_insertion_point(class_scope:FundingEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      36, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FundingEvent& from_msg);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    double fundingrate_;
    double longoi_;
    double shortoi_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_log_5fevent_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TradeEvent

// string symbol = 1;
inline void TradeEvent::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& TradeEvent::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TradeEvent.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TradeEvent::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TradeEvent.symbol)
}
inline std::string* TradeEvent::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:TradeEvent.symbol)
  return _s;
}
inline const std::string& TradeEvent::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void TradeEvent::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* TradeEvent::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* TradeEvent::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TradeEvent.symbol)
  return _impl_.symbol_.Release();
}
inline void TradeEvent::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TradeEvent.symbol)
}

// string makerOrderId = 2;
inline void TradeEvent::clear_makerorderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.makerorderid_.ClearToEmpty();
}
inline const std::string& TradeEvent::makerorderid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TradeEvent.makerOrderId)
  return _internal_makerorderid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TradeEvent::set_makerorderid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.makerorderid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TradeEvent.makerOrderId)
}
inline std::string* TradeEvent::mutable_makerorderid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_makerorderid();
  // @@protoc_insertion_point(field_mutable:TradeEvent.makerOrderId)
  return _s;
}
inline const std::string& TradeEvent::_internal_makerorderid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.makerorderid_.Get();
}
inline void TradeEvent::_internal_set_makerorderid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.makerorderid_.Set(value, GetArena());
}
inline std::string* TradeEvent::_internal_mutable_makerorderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.makerorderid_.Mutable( GetArena());
}
inline std::string* TradeEvent::release_makerorderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TradeEvent.makerOrderId)
  return _impl_.makerorderid_.Release();
}
inline void TradeEvent::set_allocated_makerorderid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.makerorderid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.makerorderid_.IsDefault()) {
    _impl_.makerorderid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TradeEvent.makerOrderId)
}

// string takerOrderId = 3;
inline void TradeEvent::clear_takerorderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.takerorderid_.ClearToEmpty();
}
inline const std::string& TradeEvent::takerorderid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TradeEvent.takerOrderId)
  return _internal_takerorderid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TradeEvent::set_takerorderid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.takerorderid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TradeEvent.takerOrderId)
}
inline std::string* TradeEvent::mutable_takerorderid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_takerorderid();
  // @@protoc_insertion_point(field_mutable:TradeEvent.takerOrderId)
  return _s;
}
inline const std::string& TradeEvent::_internal_takerorderid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.takerorderid_.Get();
}
inline void TradeEvent::_internal_set_takerorderid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.takerorderid_.Set(value, GetArena());
}
inline std::string* TradeEvent::_internal_mutable_takerorderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.takerorderid_.Mutable( GetArena());
}
inline std::string* TradeEvent::release_takerorderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TradeEvent.takerOrderId)
  return _impl_.takerorderid_.Release();
}
inline void TradeEvent::set_allocated_takerorderid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.takerorderid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.takerorderid_.IsDefault()) {
    _impl_.takerorderid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TradeEvent.takerOrderId)
}

// double price = 4;
inline void TradeEvent::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
}
inline double TradeEvent::price() const {
  // @@protoc_insertion_point(field_get:TradeEvent.price)
  return _internal_price();
}
inline void TradeEvent::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:TradeEvent.price)
}
inline double TradeEvent::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void TradeEvent::_internal_set_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// double quantity = 5;
inline void TradeEvent::clear_quantity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = 0;
}
inline double TradeEvent::quantity() const {
  // @@protoc_insertion_point(field_get:TradeEvent.quantity)
  return _internal_quantity();
}
inline void TradeEvent::set_quantity(double value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:TradeEvent.quantity)
}
inline double TradeEvent::_internal_quantity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quantity_;
}
inline void TradeEvent::_internal_set_quantity(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = value;
}

// string timestamp = 6;
inline void TradeEvent::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& TradeEvent::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TradeEvent.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TradeEvent::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TradeEvent.timestamp)
}
inline std::string* TradeEvent::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:TradeEvent.timestamp)
  return _s;
}
inline const std::string& TradeEvent::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void TradeEvent::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* TradeEvent::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* TradeEvent::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TradeEvent.timestamp)
  return _impl_.timestamp_.Release();
}
inline void TradeEvent::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TradeEvent.timestamp)
}

// -------------------------------------------------------------------

// OrderEvent

// string orderId = 1;
inline void OrderEvent::clear_orderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orderid_.ClearToEmpty();
}
inline const std::string& OrderEvent::orderid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:OrderEvent.orderId)
  return _internal_orderid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderEvent::set_orderid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orderid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:OrderEvent.orderId)
}
inline std::string* OrderEvent::mutable_orderid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_orderid();
  // @@protoc_insertion_point(field_mutable:OrderEvent.orderId)
  return _s;
}
inline const std::string& OrderEvent::_internal_orderid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.orderid_.Get();
}
inline void OrderEvent::_internal_set_orderid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orderid_.Set(value, GetArena());
}
inline std::string* OrderEvent::_internal_mutable_orderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.orderid_.Mutable( GetArena());
}
inline std::string* OrderEvent::release_orderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:OrderEvent.orderId)
  return _impl_.orderid_.Release();
}
inline void OrderEvent::set_allocated_orderid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orderid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.orderid_.IsDefault()) {
    _impl_.orderid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:OrderEvent.orderId)
}

// string userId = 2;
inline void OrderEvent::clear_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& OrderEvent::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:OrderEvent.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderEvent::set_userid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:OrderEvent.userId)
}
inline std::string* OrderEvent::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:OrderEvent.userId)
  return _s;
}
inline const std::string& OrderEvent::_internal_userid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.userid_.Get();
}
inline void OrderEvent::_internal_set_userid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* OrderEvent::_internal_mutable_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* OrderEvent::release_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:OrderEvent.userId)
  return _impl_.userid_.Release();
}
inline void OrderEvent::set_allocated_userid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:OrderEvent.userId)
}

// string symbol = 3;
inline void OrderEvent::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& OrderEvent::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:OrderEvent.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderEvent::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:OrderEvent.symbol)
}
inline std::string* OrderEvent::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:OrderEvent.symbol)
  return _s;
}
inline const std::string& OrderEvent::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void OrderEvent::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* OrderEvent::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* OrderEvent::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:OrderEvent.symbol)
  return _impl_.symbol_.Release();
}
inline void OrderEvent::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:OrderEvent.symbol)
}

// string side = 4;
inline void OrderEvent::clear_side() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_.ClearToEmpty();
}
inline const std::string& OrderEvent::side() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:OrderEvent.side)
  return _internal_side();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderEvent::set_side(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:OrderEvent.side)
}
inline std::string* OrderEvent::mutable_side() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_side();
  // @@protoc_insertion_point(field_mutable:OrderEvent.side)
  return _s;
}
inline const std::string& OrderEvent::_internal_side() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.side_.Get();
}
inline void OrderEvent::_internal_set_side(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_.Set(value, GetArena());
}
inline std::string* OrderEvent::_internal_mutable_side() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.side_.Mutable( GetArena());
}
inline std::string* OrderEvent::release_side() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:OrderEvent.side)
  return _impl_.side_.Release();
}
inline void OrderEvent::set_allocated_side(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.side_.IsDefault()) {
    _impl_.side_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:OrderEvent.side)
}

// string type_detail = 5;
inline void OrderEvent::clear_type_detail() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_detail_.ClearToEmpty();
}
inline const std::string& OrderEvent::type_detail() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:OrderEvent.type_detail)
  return _internal_type_detail();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderEvent::set_type_detail(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_detail_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:OrderEvent.type_detail)
}
inline std::string* OrderEvent::mutable_type_detail() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type_detail();
  // @@protoc_insertion_point(field_mutable:OrderEvent.type_detail)
  return _s;
}
inline const std::string& OrderEvent::_internal_type_detail() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_detail_.Get();
}
inline void OrderEvent::_internal_set_type_detail(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_detail_.Set(value, GetArena());
}
inline std::string* OrderEvent::_internal_mutable_type_detail() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.type_detail_.Mutable( GetArena());
}
inline std::string* OrderEvent::release_type_detail() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:OrderEvent.type_detail)
  return _impl_.type_detail_.Release();
}
inline void OrderEvent::set_allocated_type_detail(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_detail_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.type_detail_.IsDefault()) {
    _impl_.type_detail_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:OrderEvent.type_detail)
}

// double price = 6;
inline void OrderEvent::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
}
inline double OrderEvent::price() const {
  // @@protoc_insertion_point(field_get:OrderEvent.price)
  return _internal_price();
}
inline void OrderEvent::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:OrderEvent.price)
}
inline double OrderEvent::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void OrderEvent::_internal_set_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// double quantity = 7;
inline void OrderEvent::clear_quantity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = 0;
}
inline double OrderEvent::quantity() const {
  // @@protoc_insertion_point(field_get:OrderEvent.quantity)
  return _internal_quantity();
}
inline void OrderEvent::set_quantity(double value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:OrderEvent.quantity)
}
inline double OrderEvent::_internal_quantity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quantity_;
}
inline void OrderEvent::_internal_set_quantity(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = value;
}

// string status = 8;
inline void OrderEvent::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& OrderEvent::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:OrderEvent.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderEvent::set_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:OrderEvent.status)
}
inline std::string* OrderEvent::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:OrderEvent.status)
  return _s;
}
inline const std::string& OrderEvent::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_.Get();
}
inline void OrderEvent::_internal_set_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(value, GetArena());
}
inline std::string* OrderEvent::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* OrderEvent::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:OrderEvent.status)
  return _impl_.status_.Release();
}
inline void OrderEvent::set_allocated_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:OrderEvent.status)
}

// string timestamp = 9;
inline void OrderEvent::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& OrderEvent::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:OrderEvent.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderEvent::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:OrderEvent.timestamp)
}
inline std::string* OrderEvent::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:OrderEvent.timestamp)
  return _s;
}
inline const std::string& OrderEvent::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void OrderEvent::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* OrderEvent::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* OrderEvent::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:OrderEvent.timestamp)
  return _impl_.timestamp_.Release();
}
inline void OrderEvent::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:OrderEvent.timestamp)
}

// -------------------------------------------------------------------

// FundingEvent

// string symbol = 1;
inline void FundingEvent::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& FundingEvent::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FundingEvent.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FundingEvent::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FundingEvent.symbol)
}
inline std::string* FundingEvent::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:FundingEvent.symbol)
  return _s;
}
inline const std::string& FundingEvent::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void FundingEvent::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* FundingEvent::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* FundingEvent::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FundingEvent.symbol)
  return _impl_.symbol_.Release();
}
inline void FundingEvent::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FundingEvent.symbol)
}

// double fundingRate = 2;
inline void FundingEvent::clear_fundingrate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fundingrate_ = 0;
}
inline double FundingEvent::fundingrate() const {
  // @@protoc_insertion_point(field_get:FundingEvent.fundingRate)
  return _internal_fundingrate();
}
inline void FundingEvent::set_fundingrate(double value) {
  _internal_set_fundingrate(value);
  // @@protoc_insertion_point(field_set:FundingEvent.fundingRate)
}
inline double FundingEvent::_internal_fundingrate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fundingrate_;
}
inline void FundingEvent::_internal_set_fundingrate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fundingrate_ = value;
}

// double longOi = 3;
inline void FundingEvent::clear_longoi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longoi_ = 0;
}
inline double FundingEvent::longoi() const {
  // @@protoc_insertion_point(field_get:FundingEvent.longOi)
  return _internal_longoi();
}
inline void FundingEvent::set_longoi(double value) {
  _internal_set_longoi(value);
  // @@protoc_insertion_point(field_set:FundingEvent.longOi)
}
inline double FundingEvent::_internal_longoi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.longoi_;
}
inline void FundingEvent::_internal_set_longoi(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longoi_ = value;
}

// double shortOi = 4;
inline void FundingEvent::clear_shortoi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shortoi_ = 0;
}
inline double FundingEvent::shortoi() const {
  // @@protoc_insertion_point(field_get:FundingEvent.shortOi)
  return _internal_shortoi();
}
inline void FundingEvent::set_shortoi(double value) {
  _internal_set_shortoi(value);
  // @@protoc_insertion_point(field_set:FundingEvent.shortOi)
}
inline double FundingEvent::_internal_shortoi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.shortoi_;
}
inline void FundingEvent::_internal_set_shortoi(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.shortoi_ = value;
}

// string timestamp = 5;
inline void FundingEvent::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& FundingEvent::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:FundingEvent.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FundingEvent::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:FundingEvent.timestamp)
}
inline std::string* FundingEvent::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:FundingEvent.timestamp)
  return _s;
}
inline const std::string& FundingEvent::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void FundingEvent::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* FundingEvent::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* FundingEvent::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:FundingEvent.timestamp)
  return _impl_.timestamp_.Release();
}
inline void FundingEvent::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:FundingEvent.timestamp)
}

// -------------------------------------------------------------------

// LiquidationEvent

// string userId = 1;
inline void LiquidationEvent::clear_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& LiquidationEvent::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LiquidationEvent.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LiquidationEvent::set_userid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:LiquidationEvent.userId)
}
inline std::string* LiquidationEvent::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:LiquidationEvent.userId)
  return _s;
}
inline const std::string& LiquidationEvent::_internal_userid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.userid_.Get();
}
inline void LiquidationEvent::_internal_set_userid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* LiquidationEvent::_internal_mutable_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* LiquidationEvent::release_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:LiquidationEvent.userId)
  return _impl_.userid_.Release();
}
inline void LiquidationEvent::set_allocated_userid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:LiquidationEvent.userId)
}

// string symbol = 2;
inline void LiquidationEvent::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& LiquidationEvent::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LiquidationEvent.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LiquidationEvent::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:LiquidationEvent.symbol)
}
inline std::string* LiquidationEvent::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:LiquidationEvent.symbol)
  return _s;
}
inline const std::string& LiquidationEvent::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void LiquidationEvent::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* LiquidationEvent::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* LiquidationEvent::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:LiquidationEvent.symbol)
  return _impl_.symbol_.Release();
}
inline void LiquidationEvent::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:LiquidationEvent.symbol)
}

// double pnl = 3;
inline void LiquidationEvent::clear_pnl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pnl_ = 0;
}
inline double LiquidationEvent::pnl() const {
  // @@protoc_insertion_point(field_get:LiquidationEvent.pnl)
  return _internal_pnl();
}
inline void LiquidationEvent::set_pnl(double value) {
  _internal_set_pnl(value);
  // @@protoc_insertion_point(field_set:LiquidationEvent.pnl)
}
inline double LiquidationEvent::_internal_pnl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pnl_;
}
inline void LiquidationEvent::_internal_set_pnl(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pnl_ = value;
}

// string reason = 4;
inline void LiquidationEvent::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& LiquidationEvent::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LiquidationEvent.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LiquidationEvent::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:LiquidationEvent.reason)
}
inline std::string* LiquidationEvent::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:LiquidationEvent.reason)
  return _s;
}
inline const std::string& LiquidationEvent::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void LiquidationEvent::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* LiquidationEvent::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* LiquidationEvent::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:LiquidationEvent.reason)
  return _impl_.reason_.Release();
}
inline void LiquidationEvent::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:LiquidationEvent.reason)
}

// string timestamp = 5;
inline void LiquidationEvent::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& LiquidationEvent::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LiquidationEvent.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LiquidationEvent::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:LiquidationEvent.timestamp)
}
inline std::string* LiquidationEvent::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:LiquidationEvent.timestamp)
  return _s;
}
inline const std::string& LiquidationEvent::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void LiquidationEvent::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* LiquidationEvent::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* LiquidationEvent::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:LiquidationEvent.timestamp)
  return _impl_.timestamp_.Release();
}
inline void LiquidationEvent::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:LiquidationEvent.timestamp)
}

// -------------------------------------------------------------------

// LogAck

// bool success = 1;
inline void LogAck::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool LogAck::success() const {
  // @@protoc_insertion_point(field_get:LogAck.success)
  return _internal_success();
}
inline void LogAck::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:LogAck.success)
}
inline bool LogAck::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void LogAck::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void LogAck::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LogAck::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LogAck.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogAck::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:LogAck.message)
}
inline std::string* LogAck::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:LogAck.message)
  return _s;
}
inline const std::string& LogAck::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void LogAck::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* LogAck::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* LogAck::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:LogAck.message)
  return _impl_.message_.Release();
}
inline void LogAck::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:LogAck.message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // log_5fevent_2eproto_2epb_2eh
