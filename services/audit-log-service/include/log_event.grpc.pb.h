// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: log_event.proto
#ifndef GRPC_log_5fevent_2eproto__INCLUDED
#define GRPC_log_5fevent_2eproto__INCLUDED

#include "log_event.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

class LogEventService final {
 public:
  static constexpr char const* service_full_name() {
    return "LogEventService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status LogTrade(::grpc::ClientContext* context, const ::TradeEvent& request, ::LogAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>> AsyncLogTrade(::grpc::ClientContext* context, const ::TradeEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>>(AsyncLogTradeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>> PrepareAsyncLogTrade(::grpc::ClientContext* context, const ::TradeEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>>(PrepareAsyncLogTradeRaw(context, request, cq));
    }
    virtual ::grpc::Status LogOrder(::grpc::ClientContext* context, const ::OrderEvent& request, ::LogAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>> AsyncLogOrder(::grpc::ClientContext* context, const ::OrderEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>>(AsyncLogOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>> PrepareAsyncLogOrder(::grpc::ClientContext* context, const ::OrderEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>>(PrepareAsyncLogOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status LogFunding(::grpc::ClientContext* context, const ::FundingEvent& request, ::LogAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>> AsyncLogFunding(::grpc::ClientContext* context, const ::FundingEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>>(AsyncLogFundingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>> PrepareAsyncLogFunding(::grpc::ClientContext* context, const ::FundingEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>>(PrepareAsyncLogFundingRaw(context, request, cq));
    }
    virtual ::grpc::Status LogLiquidation(::grpc::ClientContext* context, const ::LiquidationEvent& request, ::LogAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>> AsyncLogLiquidation(::grpc::ClientContext* context, const ::LiquidationEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>>(AsyncLogLiquidationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>> PrepareAsyncLogLiquidation(::grpc::ClientContext* context, const ::LiquidationEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>>(PrepareAsyncLogLiquidationRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void LogTrade(::grpc::ClientContext* context, const ::TradeEvent* request, ::LogAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LogTrade(::grpc::ClientContext* context, const ::TradeEvent* request, ::LogAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LogOrder(::grpc::ClientContext* context, const ::OrderEvent* request, ::LogAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LogOrder(::grpc::ClientContext* context, const ::OrderEvent* request, ::LogAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LogFunding(::grpc::ClientContext* context, const ::FundingEvent* request, ::LogAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LogFunding(::grpc::ClientContext* context, const ::FundingEvent* request, ::LogAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LogLiquidation(::grpc::ClientContext* context, const ::LiquidationEvent* request, ::LogAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LogLiquidation(::grpc::ClientContext* context, const ::LiquidationEvent* request, ::LogAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>* AsyncLogTradeRaw(::grpc::ClientContext* context, const ::TradeEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>* PrepareAsyncLogTradeRaw(::grpc::ClientContext* context, const ::TradeEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>* AsyncLogOrderRaw(::grpc::ClientContext* context, const ::OrderEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>* PrepareAsyncLogOrderRaw(::grpc::ClientContext* context, const ::OrderEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>* AsyncLogFundingRaw(::grpc::ClientContext* context, const ::FundingEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>* PrepareAsyncLogFundingRaw(::grpc::ClientContext* context, const ::FundingEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>* AsyncLogLiquidationRaw(::grpc::ClientContext* context, const ::LiquidationEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LogAck>* PrepareAsyncLogLiquidationRaw(::grpc::ClientContext* context, const ::LiquidationEvent& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status LogTrade(::grpc::ClientContext* context, const ::TradeEvent& request, ::LogAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LogAck>> AsyncLogTrade(::grpc::ClientContext* context, const ::TradeEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LogAck>>(AsyncLogTradeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LogAck>> PrepareAsyncLogTrade(::grpc::ClientContext* context, const ::TradeEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LogAck>>(PrepareAsyncLogTradeRaw(context, request, cq));
    }
    ::grpc::Status LogOrder(::grpc::ClientContext* context, const ::OrderEvent& request, ::LogAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LogAck>> AsyncLogOrder(::grpc::ClientContext* context, const ::OrderEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LogAck>>(AsyncLogOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LogAck>> PrepareAsyncLogOrder(::grpc::ClientContext* context, const ::OrderEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LogAck>>(PrepareAsyncLogOrderRaw(context, request, cq));
    }
    ::grpc::Status LogFunding(::grpc::ClientContext* context, const ::FundingEvent& request, ::LogAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LogAck>> AsyncLogFunding(::grpc::ClientContext* context, const ::FundingEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LogAck>>(AsyncLogFundingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LogAck>> PrepareAsyncLogFunding(::grpc::ClientContext* context, const ::FundingEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LogAck>>(PrepareAsyncLogFundingRaw(context, request, cq));
    }
    ::grpc::Status LogLiquidation(::grpc::ClientContext* context, const ::LiquidationEvent& request, ::LogAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LogAck>> AsyncLogLiquidation(::grpc::ClientContext* context, const ::LiquidationEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LogAck>>(AsyncLogLiquidationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LogAck>> PrepareAsyncLogLiquidation(::grpc::ClientContext* context, const ::LiquidationEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LogAck>>(PrepareAsyncLogLiquidationRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void LogTrade(::grpc::ClientContext* context, const ::TradeEvent* request, ::LogAck* response, std::function<void(::grpc::Status)>) override;
      void LogTrade(::grpc::ClientContext* context, const ::TradeEvent* request, ::LogAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LogOrder(::grpc::ClientContext* context, const ::OrderEvent* request, ::LogAck* response, std::function<void(::grpc::Status)>) override;
      void LogOrder(::grpc::ClientContext* context, const ::OrderEvent* request, ::LogAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LogFunding(::grpc::ClientContext* context, const ::FundingEvent* request, ::LogAck* response, std::function<void(::grpc::Status)>) override;
      void LogFunding(::grpc::ClientContext* context, const ::FundingEvent* request, ::LogAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LogLiquidation(::grpc::ClientContext* context, const ::LiquidationEvent* request, ::LogAck* response, std::function<void(::grpc::Status)>) override;
      void LogLiquidation(::grpc::ClientContext* context, const ::LiquidationEvent* request, ::LogAck* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::LogAck>* AsyncLogTradeRaw(::grpc::ClientContext* context, const ::TradeEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::LogAck>* PrepareAsyncLogTradeRaw(::grpc::ClientContext* context, const ::TradeEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::LogAck>* AsyncLogOrderRaw(::grpc::ClientContext* context, const ::OrderEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::LogAck>* PrepareAsyncLogOrderRaw(::grpc::ClientContext* context, const ::OrderEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::LogAck>* AsyncLogFundingRaw(::grpc::ClientContext* context, const ::FundingEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::LogAck>* PrepareAsyncLogFundingRaw(::grpc::ClientContext* context, const ::FundingEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::LogAck>* AsyncLogLiquidationRaw(::grpc::ClientContext* context, const ::LiquidationEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::LogAck>* PrepareAsyncLogLiquidationRaw(::grpc::ClientContext* context, const ::LiquidationEvent& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_LogTrade_;
    const ::grpc::internal::RpcMethod rpcmethod_LogOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_LogFunding_;
    const ::grpc::internal::RpcMethod rpcmethod_LogLiquidation_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status LogTrade(::grpc::ServerContext* context, const ::TradeEvent* request, ::LogAck* response);
    virtual ::grpc::Status LogOrder(::grpc::ServerContext* context, const ::OrderEvent* request, ::LogAck* response);
    virtual ::grpc::Status LogFunding(::grpc::ServerContext* context, const ::FundingEvent* request, ::LogAck* response);
    virtual ::grpc::Status LogLiquidation(::grpc::ServerContext* context, const ::LiquidationEvent* request, ::LogAck* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_LogTrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LogTrade() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_LogTrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogTrade(::grpc::ServerContext* /*context*/, const ::TradeEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogTrade(::grpc::ServerContext* context, ::TradeEvent* request, ::grpc::ServerAsyncResponseWriter< ::LogAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LogOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LogOrder() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_LogOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogOrder(::grpc::ServerContext* /*context*/, const ::OrderEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogOrder(::grpc::ServerContext* context, ::OrderEvent* request, ::grpc::ServerAsyncResponseWriter< ::LogAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LogFunding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LogFunding() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_LogFunding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogFunding(::grpc::ServerContext* /*context*/, const ::FundingEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogFunding(::grpc::ServerContext* context, ::FundingEvent* request, ::grpc::ServerAsyncResponseWriter< ::LogAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LogLiquidation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LogLiquidation() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_LogLiquidation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogLiquidation(::grpc::ServerContext* /*context*/, const ::LiquidationEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogLiquidation(::grpc::ServerContext* context, ::LiquidationEvent* request, ::grpc::ServerAsyncResponseWriter< ::LogAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_LogTrade<WithAsyncMethod_LogOrder<WithAsyncMethod_LogFunding<WithAsyncMethod_LogLiquidation<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_LogTrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LogTrade() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::TradeEvent, ::LogAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TradeEvent* request, ::LogAck* response) { return this->LogTrade(context, request, response); }));}
    void SetMessageAllocatorFor_LogTrade(
        ::grpc::MessageAllocator< ::TradeEvent, ::LogAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TradeEvent, ::LogAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LogTrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogTrade(::grpc::ServerContext* /*context*/, const ::TradeEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LogTrade(
      ::grpc::CallbackServerContext* /*context*/, const ::TradeEvent* /*request*/, ::LogAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LogOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LogOrder() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::OrderEvent, ::LogAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::OrderEvent* request, ::LogAck* response) { return this->LogOrder(context, request, response); }));}
    void SetMessageAllocatorFor_LogOrder(
        ::grpc::MessageAllocator< ::OrderEvent, ::LogAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::OrderEvent, ::LogAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LogOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogOrder(::grpc::ServerContext* /*context*/, const ::OrderEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LogOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::OrderEvent* /*request*/, ::LogAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LogFunding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LogFunding() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::FundingEvent, ::LogAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::FundingEvent* request, ::LogAck* response) { return this->LogFunding(context, request, response); }));}
    void SetMessageAllocatorFor_LogFunding(
        ::grpc::MessageAllocator< ::FundingEvent, ::LogAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::FundingEvent, ::LogAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LogFunding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogFunding(::grpc::ServerContext* /*context*/, const ::FundingEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LogFunding(
      ::grpc::CallbackServerContext* /*context*/, const ::FundingEvent* /*request*/, ::LogAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LogLiquidation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LogLiquidation() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::LiquidationEvent, ::LogAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::LiquidationEvent* request, ::LogAck* response) { return this->LogLiquidation(context, request, response); }));}
    void SetMessageAllocatorFor_LogLiquidation(
        ::grpc::MessageAllocator< ::LiquidationEvent, ::LogAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::LiquidationEvent, ::LogAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LogLiquidation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogLiquidation(::grpc::ServerContext* /*context*/, const ::LiquidationEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LogLiquidation(
      ::grpc::CallbackServerContext* /*context*/, const ::LiquidationEvent* /*request*/, ::LogAck* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_LogTrade<WithCallbackMethod_LogOrder<WithCallbackMethod_LogFunding<WithCallbackMethod_LogLiquidation<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_LogTrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LogTrade() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_LogTrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogTrade(::grpc::ServerContext* /*context*/, const ::TradeEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LogOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LogOrder() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_LogOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogOrder(::grpc::ServerContext* /*context*/, const ::OrderEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LogFunding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LogFunding() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_LogFunding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogFunding(::grpc::ServerContext* /*context*/, const ::FundingEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LogLiquidation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LogLiquidation() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_LogLiquidation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogLiquidation(::grpc::ServerContext* /*context*/, const ::LiquidationEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_LogTrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LogTrade() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_LogTrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogTrade(::grpc::ServerContext* /*context*/, const ::TradeEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogTrade(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LogOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LogOrder() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_LogOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogOrder(::grpc::ServerContext* /*context*/, const ::OrderEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LogFunding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LogFunding() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_LogFunding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogFunding(::grpc::ServerContext* /*context*/, const ::FundingEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogFunding(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LogLiquidation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LogLiquidation() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_LogLiquidation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogLiquidation(::grpc::ServerContext* /*context*/, const ::LiquidationEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogLiquidation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LogTrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LogTrade() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LogTrade(context, request, response); }));
    }
    ~WithRawCallbackMethod_LogTrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogTrade(::grpc::ServerContext* /*context*/, const ::TradeEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LogTrade(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LogOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LogOrder() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LogOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_LogOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogOrder(::grpc::ServerContext* /*context*/, const ::OrderEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LogOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LogFunding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LogFunding() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LogFunding(context, request, response); }));
    }
    ~WithRawCallbackMethod_LogFunding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogFunding(::grpc::ServerContext* /*context*/, const ::FundingEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LogFunding(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LogLiquidation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LogLiquidation() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LogLiquidation(context, request, response); }));
    }
    ~WithRawCallbackMethod_LogLiquidation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogLiquidation(::grpc::ServerContext* /*context*/, const ::LiquidationEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LogLiquidation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LogTrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LogTrade() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TradeEvent, ::LogAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TradeEvent, ::LogAck>* streamer) {
                       return this->StreamedLogTrade(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LogTrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LogTrade(::grpc::ServerContext* /*context*/, const ::TradeEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogTrade(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TradeEvent,::LogAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LogOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LogOrder() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::OrderEvent, ::LogAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::OrderEvent, ::LogAck>* streamer) {
                       return this->StreamedLogOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LogOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LogOrder(::grpc::ServerContext* /*context*/, const ::OrderEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::OrderEvent,::LogAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LogFunding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LogFunding() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::FundingEvent, ::LogAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::FundingEvent, ::LogAck>* streamer) {
                       return this->StreamedLogFunding(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LogFunding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LogFunding(::grpc::ServerContext* /*context*/, const ::FundingEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogFunding(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FundingEvent,::LogAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LogLiquidation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LogLiquidation() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::LiquidationEvent, ::LogAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::LiquidationEvent, ::LogAck>* streamer) {
                       return this->StreamedLogLiquidation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LogLiquidation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LogLiquidation(::grpc::ServerContext* /*context*/, const ::LiquidationEvent* /*request*/, ::LogAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogLiquidation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::LiquidationEvent,::LogAck>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_LogTrade<WithStreamedUnaryMethod_LogOrder<WithStreamedUnaryMethod_LogFunding<WithStreamedUnaryMethod_LogLiquidation<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_LogTrade<WithStreamedUnaryMethod_LogOrder<WithStreamedUnaryMethod_LogFunding<WithStreamedUnaryMethod_LogLiquidation<Service > > > > StreamedService;
};


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_log_5fevent_2eproto__INCLUDED
