// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: user.proto
#ifndef GRPC_user_2eproto__INCLUDED
#define GRPC_user_2eproto__INCLUDED

#include "user.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace user {

class UserService final {
 public:
  static constexpr char const* service_full_name() {
    return "user.UserService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Already existing
    virtual ::grpc::Status UpdateWallet(::grpc::ClientContext* context, const ::user::WalletUpdateRequest& request, ::user::WalletResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::WalletResponse>> AsyncUpdateWallet(::grpc::ClientContext* context, const ::user::WalletUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::WalletResponse>>(AsyncUpdateWalletRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::WalletResponse>> PrepareAsyncUpdateWallet(::grpc::ClientContext* context, const ::user::WalletUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::WalletResponse>>(PrepareAsyncUpdateWalletRaw(context, request, cq));
    }
    // Required for order-service
    virtual ::grpc::Status GetUserMetadata(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::user::UserMetadataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::UserMetadataResponse>> AsyncGetUserMetadata(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::UserMetadataResponse>>(AsyncGetUserMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::UserMetadataResponse>> PrepareAsyncGetUserMetadata(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::UserMetadataResponse>>(PrepareAsyncGetUserMetadataRaw(context, request, cq));
    }
    virtual ::grpc::Status GetWallet(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::user::WalletResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::WalletResponse>> AsyncGetWallet(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::WalletResponse>>(AsyncGetWalletRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::WalletResponse>> PrepareAsyncGetWallet(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::WalletResponse>>(PrepareAsyncGetWalletRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Already existing
      virtual void UpdateWallet(::grpc::ClientContext* context, const ::user::WalletUpdateRequest* request, ::user::WalletResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateWallet(::grpc::ClientContext* context, const ::user::WalletUpdateRequest* request, ::user::WalletResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Required for order-service
      virtual void GetUserMetadata(::grpc::ClientContext* context, const ::user::UserIdRequest* request, ::user::UserMetadataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUserMetadata(::grpc::ClientContext* context, const ::user::UserIdRequest* request, ::user::UserMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetWallet(::grpc::ClientContext* context, const ::user::UserIdRequest* request, ::user::WalletResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWallet(::grpc::ClientContext* context, const ::user::UserIdRequest* request, ::user::WalletResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::WalletResponse>* AsyncUpdateWalletRaw(::grpc::ClientContext* context, const ::user::WalletUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::WalletResponse>* PrepareAsyncUpdateWalletRaw(::grpc::ClientContext* context, const ::user::WalletUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::UserMetadataResponse>* AsyncGetUserMetadataRaw(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::UserMetadataResponse>* PrepareAsyncGetUserMetadataRaw(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::WalletResponse>* AsyncGetWalletRaw(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::WalletResponse>* PrepareAsyncGetWalletRaw(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status UpdateWallet(::grpc::ClientContext* context, const ::user::WalletUpdateRequest& request, ::user::WalletResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::WalletResponse>> AsyncUpdateWallet(::grpc::ClientContext* context, const ::user::WalletUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::WalletResponse>>(AsyncUpdateWalletRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::WalletResponse>> PrepareAsyncUpdateWallet(::grpc::ClientContext* context, const ::user::WalletUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::WalletResponse>>(PrepareAsyncUpdateWalletRaw(context, request, cq));
    }
    ::grpc::Status GetUserMetadata(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::user::UserMetadataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::UserMetadataResponse>> AsyncGetUserMetadata(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::UserMetadataResponse>>(AsyncGetUserMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::UserMetadataResponse>> PrepareAsyncGetUserMetadata(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::UserMetadataResponse>>(PrepareAsyncGetUserMetadataRaw(context, request, cq));
    }
    ::grpc::Status GetWallet(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::user::WalletResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::WalletResponse>> AsyncGetWallet(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::WalletResponse>>(AsyncGetWalletRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::WalletResponse>> PrepareAsyncGetWallet(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::WalletResponse>>(PrepareAsyncGetWalletRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void UpdateWallet(::grpc::ClientContext* context, const ::user::WalletUpdateRequest* request, ::user::WalletResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateWallet(::grpc::ClientContext* context, const ::user::WalletUpdateRequest* request, ::user::WalletResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetUserMetadata(::grpc::ClientContext* context, const ::user::UserIdRequest* request, ::user::UserMetadataResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUserMetadata(::grpc::ClientContext* context, const ::user::UserIdRequest* request, ::user::UserMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetWallet(::grpc::ClientContext* context, const ::user::UserIdRequest* request, ::user::WalletResponse* response, std::function<void(::grpc::Status)>) override;
      void GetWallet(::grpc::ClientContext* context, const ::user::UserIdRequest* request, ::user::WalletResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::user::WalletResponse>* AsyncUpdateWalletRaw(::grpc::ClientContext* context, const ::user::WalletUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::WalletResponse>* PrepareAsyncUpdateWalletRaw(::grpc::ClientContext* context, const ::user::WalletUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::UserMetadataResponse>* AsyncGetUserMetadataRaw(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::UserMetadataResponse>* PrepareAsyncGetUserMetadataRaw(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::WalletResponse>* AsyncGetWalletRaw(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::WalletResponse>* PrepareAsyncGetWalletRaw(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateWallet_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUserMetadata_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWallet_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Already existing
    virtual ::grpc::Status UpdateWallet(::grpc::ServerContext* context, const ::user::WalletUpdateRequest* request, ::user::WalletResponse* response);
    // Required for order-service
    virtual ::grpc::Status GetUserMetadata(::grpc::ServerContext* context, const ::user::UserIdRequest* request, ::user::UserMetadataResponse* response);
    virtual ::grpc::Status GetWallet(::grpc::ServerContext* context, const ::user::UserIdRequest* request, ::user::WalletResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateWallet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateWallet() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UpdateWallet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWallet(::grpc::ServerContext* /*context*/, const ::user::WalletUpdateRequest* /*request*/, ::user::WalletResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateWallet(::grpc::ServerContext* context, ::user::WalletUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::user::WalletResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUserMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUserMetadata() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetUserMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserMetadata(::grpc::ServerContext* /*context*/, const ::user::UserIdRequest* /*request*/, ::user::UserMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserMetadata(::grpc::ServerContext* context, ::user::UserIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::user::UserMetadataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWallet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWallet() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetWallet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWallet(::grpc::ServerContext* /*context*/, const ::user::UserIdRequest* /*request*/, ::user::WalletResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWallet(::grpc::ServerContext* context, ::user::UserIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::user::WalletResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UpdateWallet<WithAsyncMethod_GetUserMetadata<WithAsyncMethod_GetWallet<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_UpdateWallet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateWallet() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::user::WalletUpdateRequest, ::user::WalletResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::user::WalletUpdateRequest* request, ::user::WalletResponse* response) { return this->UpdateWallet(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateWallet(
        ::grpc::MessageAllocator< ::user::WalletUpdateRequest, ::user::WalletResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::user::WalletUpdateRequest, ::user::WalletResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateWallet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWallet(::grpc::ServerContext* /*context*/, const ::user::WalletUpdateRequest* /*request*/, ::user::WalletResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateWallet(
      ::grpc::CallbackServerContext* /*context*/, const ::user::WalletUpdateRequest* /*request*/, ::user::WalletResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetUserMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUserMetadata() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::user::UserIdRequest, ::user::UserMetadataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::user::UserIdRequest* request, ::user::UserMetadataResponse* response) { return this->GetUserMetadata(context, request, response); }));}
    void SetMessageAllocatorFor_GetUserMetadata(
        ::grpc::MessageAllocator< ::user::UserIdRequest, ::user::UserMetadataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::user::UserIdRequest, ::user::UserMetadataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUserMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserMetadata(::grpc::ServerContext* /*context*/, const ::user::UserIdRequest* /*request*/, ::user::UserMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::user::UserIdRequest* /*request*/, ::user::UserMetadataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetWallet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWallet() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::user::UserIdRequest, ::user::WalletResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::user::UserIdRequest* request, ::user::WalletResponse* response) { return this->GetWallet(context, request, response); }));}
    void SetMessageAllocatorFor_GetWallet(
        ::grpc::MessageAllocator< ::user::UserIdRequest, ::user::WalletResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::user::UserIdRequest, ::user::WalletResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWallet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWallet(::grpc::ServerContext* /*context*/, const ::user::UserIdRequest* /*request*/, ::user::WalletResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWallet(
      ::grpc::CallbackServerContext* /*context*/, const ::user::UserIdRequest* /*request*/, ::user::WalletResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_UpdateWallet<WithCallbackMethod_GetUserMetadata<WithCallbackMethod_GetWallet<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UpdateWallet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateWallet() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UpdateWallet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWallet(::grpc::ServerContext* /*context*/, const ::user::WalletUpdateRequest* /*request*/, ::user::WalletResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUserMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUserMetadata() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetUserMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserMetadata(::grpc::ServerContext* /*context*/, const ::user::UserIdRequest* /*request*/, ::user::UserMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWallet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWallet() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetWallet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWallet(::grpc::ServerContext* /*context*/, const ::user::UserIdRequest* /*request*/, ::user::WalletResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateWallet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateWallet() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UpdateWallet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWallet(::grpc::ServerContext* /*context*/, const ::user::WalletUpdateRequest* /*request*/, ::user::WalletResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateWallet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUserMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUserMetadata() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetUserMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserMetadata(::grpc::ServerContext* /*context*/, const ::user::UserIdRequest* /*request*/, ::user::UserMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWallet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWallet() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetWallet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWallet(::grpc::ServerContext* /*context*/, const ::user::UserIdRequest* /*request*/, ::user::WalletResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWallet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateWallet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateWallet() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateWallet(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateWallet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWallet(::grpc::ServerContext* /*context*/, const ::user::WalletUpdateRequest* /*request*/, ::user::WalletResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateWallet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUserMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUserMetadata() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUserMetadata(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUserMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserMetadata(::grpc::ServerContext* /*context*/, const ::user::UserIdRequest* /*request*/, ::user::UserMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWallet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWallet() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWallet(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWallet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWallet(::grpc::ServerContext* /*context*/, const ::user::UserIdRequest* /*request*/, ::user::WalletResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWallet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateWallet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateWallet() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::user::WalletUpdateRequest, ::user::WalletResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::user::WalletUpdateRequest, ::user::WalletResponse>* streamer) {
                       return this->StreamedUpdateWallet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateWallet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateWallet(::grpc::ServerContext* /*context*/, const ::user::WalletUpdateRequest* /*request*/, ::user::WalletResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateWallet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::user::WalletUpdateRequest,::user::WalletResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUserMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUserMetadata() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::user::UserIdRequest, ::user::UserMetadataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::user::UserIdRequest, ::user::UserMetadataResponse>* streamer) {
                       return this->StreamedGetUserMetadata(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUserMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUserMetadata(::grpc::ServerContext* /*context*/, const ::user::UserIdRequest* /*request*/, ::user::UserMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUserMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::user::UserIdRequest,::user::UserMetadataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWallet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWallet() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::user::UserIdRequest, ::user::WalletResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::user::UserIdRequest, ::user::WalletResponse>* streamer) {
                       return this->StreamedGetWallet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWallet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWallet(::grpc::ServerContext* /*context*/, const ::user::UserIdRequest* /*request*/, ::user::WalletResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWallet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::user::UserIdRequest,::user::WalletResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UpdateWallet<WithStreamedUnaryMethod_GetUserMetadata<WithStreamedUnaryMethod_GetWallet<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UpdateWallet<WithStreamedUnaryMethod_GetUserMetadata<WithStreamedUnaryMethod_GetWallet<Service > > > StreamedService;
};

}  // namespace user


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_user_2eproto__INCLUDED
