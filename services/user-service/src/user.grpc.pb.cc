// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: user.proto

#include "user.pb.h"
#include "user.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace user {

static const char* UserService_method_names[] = {
  "/user.UserService/UpdateWallet",
  "/user.UserService/GetUserMetadata",
  "/user.UserService/GetWallet",
};

std::unique_ptr< UserService::Stub> UserService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserService::Stub> stub(new UserService::Stub(channel, options));
  return stub;
}

UserService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UpdateWallet_(UserService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUserMetadata_(UserService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWallet_(UserService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserService::Stub::UpdateWallet(::grpc::ClientContext* context, const ::user::WalletUpdateRequest& request, ::user::WalletResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::WalletUpdateRequest, ::user::WalletResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateWallet_, context, request, response);
}

void UserService::Stub::async::UpdateWallet(::grpc::ClientContext* context, const ::user::WalletUpdateRequest* request, ::user::WalletResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::WalletUpdateRequest, ::user::WalletResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateWallet_, context, request, response, std::move(f));
}

void UserService::Stub::async::UpdateWallet(::grpc::ClientContext* context, const ::user::WalletUpdateRequest* request, ::user::WalletResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateWallet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::WalletResponse>* UserService::Stub::PrepareAsyncUpdateWalletRaw(::grpc::ClientContext* context, const ::user::WalletUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::WalletResponse, ::user::WalletUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateWallet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::WalletResponse>* UserService::Stub::AsyncUpdateWalletRaw(::grpc::ClientContext* context, const ::user::WalletUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateWalletRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::GetUserMetadata(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::user::UserMetadataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::UserIdRequest, ::user::UserMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUserMetadata_, context, request, response);
}

void UserService::Stub::async::GetUserMetadata(::grpc::ClientContext* context, const ::user::UserIdRequest* request, ::user::UserMetadataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::UserIdRequest, ::user::UserMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserMetadata_, context, request, response, std::move(f));
}

void UserService::Stub::async::GetUserMetadata(::grpc::ClientContext* context, const ::user::UserIdRequest* request, ::user::UserMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserMetadata_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::UserMetadataResponse>* UserService::Stub::PrepareAsyncGetUserMetadataRaw(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::UserMetadataResponse, ::user::UserIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUserMetadata_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::UserMetadataResponse>* UserService::Stub::AsyncGetUserMetadataRaw(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUserMetadataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::GetWallet(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::user::WalletResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::UserIdRequest, ::user::WalletResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWallet_, context, request, response);
}

void UserService::Stub::async::GetWallet(::grpc::ClientContext* context, const ::user::UserIdRequest* request, ::user::WalletResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::UserIdRequest, ::user::WalletResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWallet_, context, request, response, std::move(f));
}

void UserService::Stub::async::GetWallet(::grpc::ClientContext* context, const ::user::UserIdRequest* request, ::user::WalletResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWallet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::WalletResponse>* UserService::Stub::PrepareAsyncGetWalletRaw(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::WalletResponse, ::user::UserIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWallet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::WalletResponse>* UserService::Stub::AsyncGetWalletRaw(::grpc::ClientContext* context, const ::user::UserIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWalletRaw(context, request, cq);
  result->StartCall();
  return result;
}

UserService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::user::WalletUpdateRequest, ::user::WalletResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::WalletUpdateRequest* req,
             ::user::WalletResponse* resp) {
               return service->UpdateWallet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::user::UserIdRequest, ::user::UserMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::UserIdRequest* req,
             ::user::UserMetadataResponse* resp) {
               return service->GetUserMetadata(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::user::UserIdRequest, ::user::WalletResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::UserIdRequest* req,
             ::user::WalletResponse* resp) {
               return service->GetWallet(ctx, req, resp);
             }, this)));
}

UserService::Service::~Service() {
}

::grpc::Status UserService::Service::UpdateWallet(::grpc::ServerContext* context, const ::user::WalletUpdateRequest* request, ::user::WalletResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::GetUserMetadata(::grpc::ServerContext* context, const ::user::UserIdRequest* request, ::user::UserMetadataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::GetWallet(::grpc::ServerContext* context, const ::user::UserIdRequest* request, ::user::WalletResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace user
#include <grpcpp/ports_undef.inc>

