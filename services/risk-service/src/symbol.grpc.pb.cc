// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: symbol.proto

#include "symbol.pb.h"
#include "symbol.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

static const char* SymbolRegistry_method_names[] = {
  "/SymbolRegistry/GetSymbolMetadata",
  "/SymbolRegistry/ListAllSymbols",
};

std::unique_ptr< SymbolRegistry::Stub> SymbolRegistry::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SymbolRegistry::Stub> stub(new SymbolRegistry::Stub(channel, options));
  return stub;
}

SymbolRegistry::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetSymbolMetadata_(SymbolRegistry_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListAllSymbols_(SymbolRegistry_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SymbolRegistry::Stub::GetSymbolMetadata(::grpc::ClientContext* context, const ::SymbolRequest& request, ::SymbolMetadata* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SymbolRequest, ::SymbolMetadata, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSymbolMetadata_, context, request, response);
}

void SymbolRegistry::Stub::async::GetSymbolMetadata(::grpc::ClientContext* context, const ::SymbolRequest* request, ::SymbolMetadata* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SymbolRequest, ::SymbolMetadata, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSymbolMetadata_, context, request, response, std::move(f));
}

void SymbolRegistry::Stub::async::GetSymbolMetadata(::grpc::ClientContext* context, const ::SymbolRequest* request, ::SymbolMetadata* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSymbolMetadata_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SymbolMetadata>* SymbolRegistry::Stub::PrepareAsyncGetSymbolMetadataRaw(::grpc::ClientContext* context, const ::SymbolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::SymbolMetadata, ::SymbolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSymbolMetadata_, context, request);
}

::grpc::ClientAsyncResponseReader< ::SymbolMetadata>* SymbolRegistry::Stub::AsyncGetSymbolMetadataRaw(::grpc::ClientContext* context, const ::SymbolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSymbolMetadataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SymbolRegistry::Stub::ListAllSymbols(::grpc::ClientContext* context, const ::Empty& request, ::SymbolList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Empty, ::SymbolList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListAllSymbols_, context, request, response);
}

void SymbolRegistry::Stub::async::ListAllSymbols(::grpc::ClientContext* context, const ::Empty* request, ::SymbolList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Empty, ::SymbolList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListAllSymbols_, context, request, response, std::move(f));
}

void SymbolRegistry::Stub::async::ListAllSymbols(::grpc::ClientContext* context, const ::Empty* request, ::SymbolList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListAllSymbols_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SymbolList>* SymbolRegistry::Stub::PrepareAsyncListAllSymbolsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::SymbolList, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListAllSymbols_, context, request);
}

::grpc::ClientAsyncResponseReader< ::SymbolList>* SymbolRegistry::Stub::AsyncListAllSymbolsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListAllSymbolsRaw(context, request, cq);
  result->StartCall();
  return result;
}

SymbolRegistry::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SymbolRegistry_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SymbolRegistry::Service, ::SymbolRequest, ::SymbolMetadata, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SymbolRegistry::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SymbolRequest* req,
             ::SymbolMetadata* resp) {
               return service->GetSymbolMetadata(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SymbolRegistry_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SymbolRegistry::Service, ::Empty, ::SymbolList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SymbolRegistry::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::SymbolList* resp) {
               return service->ListAllSymbols(ctx, req, resp);
             }, this)));
}

SymbolRegistry::Service::~Service() {
}

::grpc::Status SymbolRegistry::Service::GetSymbolMetadata(::grpc::ServerContext* context, const ::SymbolRequest* request, ::SymbolMetadata* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SymbolRegistry::Service::ListAllSymbols(::grpc::ServerContext* context, const ::Empty* request, ::SymbolList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


