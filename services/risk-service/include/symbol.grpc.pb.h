// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: symbol.proto
#ifndef GRPC_symbol_2eproto__INCLUDED
#define GRPC_symbol_2eproto__INCLUDED

#include "symbol.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

class SymbolRegistry final {
 public:
  static constexpr char const* service_full_name() {
    return "SymbolRegistry";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetSymbolMetadata(::grpc::ClientContext* context, const ::SymbolRequest& request, ::SymbolMetadata* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SymbolMetadata>> AsyncGetSymbolMetadata(::grpc::ClientContext* context, const ::SymbolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SymbolMetadata>>(AsyncGetSymbolMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SymbolMetadata>> PrepareAsyncGetSymbolMetadata(::grpc::ClientContext* context, const ::SymbolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SymbolMetadata>>(PrepareAsyncGetSymbolMetadataRaw(context, request, cq));
    }
    virtual ::grpc::Status ListAllSymbols(::grpc::ClientContext* context, const ::Empty& request, ::SymbolList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SymbolList>> AsyncListAllSymbols(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SymbolList>>(AsyncListAllSymbolsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SymbolList>> PrepareAsyncListAllSymbols(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SymbolList>>(PrepareAsyncListAllSymbolsRaw(context, request, cq));
    }
    // ðŸ‘ˆ New
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetSymbolMetadata(::grpc::ClientContext* context, const ::SymbolRequest* request, ::SymbolMetadata* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSymbolMetadata(::grpc::ClientContext* context, const ::SymbolRequest* request, ::SymbolMetadata* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListAllSymbols(::grpc::ClientContext* context, const ::Empty* request, ::SymbolList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListAllSymbols(::grpc::ClientContext* context, const ::Empty* request, ::SymbolList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ðŸ‘ˆ New
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SymbolMetadata>* AsyncGetSymbolMetadataRaw(::grpc::ClientContext* context, const ::SymbolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SymbolMetadata>* PrepareAsyncGetSymbolMetadataRaw(::grpc::ClientContext* context, const ::SymbolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SymbolList>* AsyncListAllSymbolsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SymbolList>* PrepareAsyncListAllSymbolsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetSymbolMetadata(::grpc::ClientContext* context, const ::SymbolRequest& request, ::SymbolMetadata* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SymbolMetadata>> AsyncGetSymbolMetadata(::grpc::ClientContext* context, const ::SymbolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SymbolMetadata>>(AsyncGetSymbolMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SymbolMetadata>> PrepareAsyncGetSymbolMetadata(::grpc::ClientContext* context, const ::SymbolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SymbolMetadata>>(PrepareAsyncGetSymbolMetadataRaw(context, request, cq));
    }
    ::grpc::Status ListAllSymbols(::grpc::ClientContext* context, const ::Empty& request, ::SymbolList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SymbolList>> AsyncListAllSymbols(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SymbolList>>(AsyncListAllSymbolsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SymbolList>> PrepareAsyncListAllSymbols(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SymbolList>>(PrepareAsyncListAllSymbolsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetSymbolMetadata(::grpc::ClientContext* context, const ::SymbolRequest* request, ::SymbolMetadata* response, std::function<void(::grpc::Status)>) override;
      void GetSymbolMetadata(::grpc::ClientContext* context, const ::SymbolRequest* request, ::SymbolMetadata* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListAllSymbols(::grpc::ClientContext* context, const ::Empty* request, ::SymbolList* response, std::function<void(::grpc::Status)>) override;
      void ListAllSymbols(::grpc::ClientContext* context, const ::Empty* request, ::SymbolList* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::SymbolMetadata>* AsyncGetSymbolMetadataRaw(::grpc::ClientContext* context, const ::SymbolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SymbolMetadata>* PrepareAsyncGetSymbolMetadataRaw(::grpc::ClientContext* context, const ::SymbolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SymbolList>* AsyncListAllSymbolsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SymbolList>* PrepareAsyncListAllSymbolsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetSymbolMetadata_;
    const ::grpc::internal::RpcMethod rpcmethod_ListAllSymbols_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetSymbolMetadata(::grpc::ServerContext* context, const ::SymbolRequest* request, ::SymbolMetadata* response);
    virtual ::grpc::Status ListAllSymbols(::grpc::ServerContext* context, const ::Empty* request, ::SymbolList* response);
    // ðŸ‘ˆ New
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSymbolMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSymbolMetadata() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetSymbolMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSymbolMetadata(::grpc::ServerContext* /*context*/, const ::SymbolRequest* /*request*/, ::SymbolMetadata* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSymbolMetadata(::grpc::ServerContext* context, ::SymbolRequest* request, ::grpc::ServerAsyncResponseWriter< ::SymbolMetadata>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAllSymbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListAllSymbols() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListAllSymbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllSymbols(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::SymbolList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAllSymbols(::grpc::ServerContext* context, ::Empty* request, ::grpc::ServerAsyncResponseWriter< ::SymbolList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetSymbolMetadata<WithAsyncMethod_ListAllSymbols<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetSymbolMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSymbolMetadata() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::SymbolRequest, ::SymbolMetadata>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::SymbolRequest* request, ::SymbolMetadata* response) { return this->GetSymbolMetadata(context, request, response); }));}
    void SetMessageAllocatorFor_GetSymbolMetadata(
        ::grpc::MessageAllocator< ::SymbolRequest, ::SymbolMetadata>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SymbolRequest, ::SymbolMetadata>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSymbolMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSymbolMetadata(::grpc::ServerContext* /*context*/, const ::SymbolRequest* /*request*/, ::SymbolMetadata* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSymbolMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::SymbolRequest* /*request*/, ::SymbolMetadata* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListAllSymbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListAllSymbols() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Empty, ::SymbolList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Empty* request, ::SymbolList* response) { return this->ListAllSymbols(context, request, response); }));}
    void SetMessageAllocatorFor_ListAllSymbols(
        ::grpc::MessageAllocator< ::Empty, ::SymbolList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Empty, ::SymbolList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListAllSymbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllSymbols(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::SymbolList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAllSymbols(
      ::grpc::CallbackServerContext* /*context*/, const ::Empty* /*request*/, ::SymbolList* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetSymbolMetadata<WithCallbackMethod_ListAllSymbols<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetSymbolMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSymbolMetadata() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetSymbolMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSymbolMetadata(::grpc::ServerContext* /*context*/, const ::SymbolRequest* /*request*/, ::SymbolMetadata* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListAllSymbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListAllSymbols() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListAllSymbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllSymbols(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::SymbolList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSymbolMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSymbolMetadata() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetSymbolMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSymbolMetadata(::grpc::ServerContext* /*context*/, const ::SymbolRequest* /*request*/, ::SymbolMetadata* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSymbolMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAllSymbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListAllSymbols() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListAllSymbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllSymbols(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::SymbolList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAllSymbols(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSymbolMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSymbolMetadata() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSymbolMetadata(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSymbolMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSymbolMetadata(::grpc::ServerContext* /*context*/, const ::SymbolRequest* /*request*/, ::SymbolMetadata* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSymbolMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListAllSymbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListAllSymbols() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListAllSymbols(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListAllSymbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllSymbols(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::SymbolList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAllSymbols(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSymbolMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSymbolMetadata() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SymbolRequest, ::SymbolMetadata>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::SymbolRequest, ::SymbolMetadata>* streamer) {
                       return this->StreamedGetSymbolMetadata(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSymbolMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSymbolMetadata(::grpc::ServerContext* /*context*/, const ::SymbolRequest* /*request*/, ::SymbolMetadata* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSymbolMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SymbolRequest,::SymbolMetadata>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAllSymbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListAllSymbols() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Empty, ::SymbolList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Empty, ::SymbolList>* streamer) {
                       return this->StreamedListAllSymbols(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListAllSymbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAllSymbols(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::SymbolList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAllSymbols(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Empty,::SymbolList>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetSymbolMetadata<WithStreamedUnaryMethod_ListAllSymbols<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetSymbolMetadata<WithStreamedUnaryMethod_ListAllSymbols<Service > > StreamedService;
};


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_symbol_2eproto__INCLUDED
