// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: config.proto

#include "config.pb.h"
#include "config.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace config {

static const char* ConfigService_method_names[] = {
  "/config.ConfigService/GetConfig",
  "/config.ConfigService/GetAll",
};

std::unique_ptr< ConfigService::Stub> ConfigService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ConfigService::Stub> stub(new ConfigService::Stub(channel, options));
  return stub;
}

ConfigService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetConfig_(ConfigService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAll_(ConfigService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ConfigService::Stub::GetConfig(::grpc::ClientContext* context, const ::config::ConfigRequest& request, ::config::ConfigValue* response) {
  return ::grpc::internal::BlockingUnaryCall< ::config::ConfigRequest, ::config::ConfigValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConfig_, context, request, response);
}

void ConfigService::Stub::async::GetConfig(::grpc::ClientContext* context, const ::config::ConfigRequest* request, ::config::ConfigValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::config::ConfigRequest, ::config::ConfigValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConfig_, context, request, response, std::move(f));
}

void ConfigService::Stub::async::GetConfig(::grpc::ClientContext* context, const ::config::ConfigRequest* request, ::config::ConfigValue* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::config::ConfigValue>* ConfigService::Stub::PrepareAsyncGetConfigRaw(::grpc::ClientContext* context, const ::config::ConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::config::ConfigValue, ::config::ConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::config::ConfigValue>* ConfigService::Stub::AsyncGetConfigRaw(::grpc::ClientContext* context, const ::config::ConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigService::Stub::GetAll(::grpc::ClientContext* context, const ::config::Empty& request, ::config::ConfigMap* response) {
  return ::grpc::internal::BlockingUnaryCall< ::config::Empty, ::config::ConfigMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAll_, context, request, response);
}

void ConfigService::Stub::async::GetAll(::grpc::ClientContext* context, const ::config::Empty* request, ::config::ConfigMap* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::config::Empty, ::config::ConfigMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAll_, context, request, response, std::move(f));
}

void ConfigService::Stub::async::GetAll(::grpc::ClientContext* context, const ::config::Empty* request, ::config::ConfigMap* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::config::ConfigMap>* ConfigService::Stub::PrepareAsyncGetAllRaw(::grpc::ClientContext* context, const ::config::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::config::ConfigMap, ::config::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAll_, context, request);
}

::grpc::ClientAsyncResponseReader< ::config::ConfigMap>* ConfigService::Stub::AsyncGetAllRaw(::grpc::ClientContext* context, const ::config::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllRaw(context, request, cq);
  result->StartCall();
  return result;
}

ConfigService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigService::Service, ::config::ConfigRequest, ::config::ConfigValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::config::ConfigRequest* req,
             ::config::ConfigValue* resp) {
               return service->GetConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigService::Service, ::config::Empty, ::config::ConfigMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::config::Empty* req,
             ::config::ConfigMap* resp) {
               return service->GetAll(ctx, req, resp);
             }, this)));
}

ConfigService::Service::~Service() {
}

::grpc::Status ConfigService::Service::GetConfig(::grpc::ServerContext* context, const ::config::ConfigRequest* request, ::config::ConfigValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigService::Service::GetAll(::grpc::ServerContext* context, const ::config::Empty* request, ::config::ConfigMap* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace config
#include <grpcpp/ports_undef.inc>

