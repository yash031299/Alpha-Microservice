// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: symbol.proto
// Protobuf C++ Version: 5.29.3

#ifndef symbol_2eproto_2epb_2eh
#define symbol_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_symbol_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_symbol_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_symbol_2eproto;
namespace symbol {
class SymbolRequest;
struct SymbolRequestDefaultTypeInternal;
extern SymbolRequestDefaultTypeInternal _SymbolRequest_default_instance_;
class SymbolResponse;
struct SymbolResponseDefaultTypeInternal;
extern SymbolResponseDefaultTypeInternal _SymbolResponse_default_instance_;
}  // namespace symbol
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace symbol {

// ===================================================================


// -------------------------------------------------------------------

class SymbolResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:symbol.SymbolResponse) */ {
 public:
  inline SymbolResponse() : SymbolResponse(nullptr) {}
  ~SymbolResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SymbolResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SymbolResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SymbolResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SymbolResponse(const SymbolResponse& from) : SymbolResponse(nullptr, from) {}
  inline SymbolResponse(SymbolResponse&& from) noexcept
      : SymbolResponse(nullptr, std::move(from)) {}
  inline SymbolResponse& operator=(const SymbolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SymbolResponse& operator=(SymbolResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SymbolResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SymbolResponse* internal_default_instance() {
    return reinterpret_cast<const SymbolResponse*>(
        &_SymbolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SymbolResponse& a, SymbolResponse& b) { a.Swap(&b); }
  inline void Swap(SymbolResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SymbolResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SymbolResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SymbolResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SymbolResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SymbolResponse& from) { SymbolResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SymbolResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "symbol.SymbolResponse"; }

 protected:
  explicit SymbolResponse(::google::protobuf::Arena* arena);
  SymbolResponse(::google::protobuf::Arena* arena, const SymbolResponse& from);
  SymbolResponse(::google::protobuf::Arena* arena, SymbolResponse&& from) noexcept
      : SymbolResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 2,
    kTickSizeFieldNumber = 3,
    kFoundFieldNumber = 1,
    kPricePrecisionFieldNumber = 5,
    kMaxLeverageFieldNumber = 4,
    kQuantityPrecisionFieldNumber = 6,
  };
  // string symbol = 2;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // double tick_size = 3;
  void clear_tick_size() ;
  double tick_size() const;
  void set_tick_size(double value);

  private:
  double _internal_tick_size() const;
  void _internal_set_tick_size(double value);

  public:
  // bool found = 1;
  void clear_found() ;
  bool found() const;
  void set_found(bool value);

  private:
  bool _internal_found() const;
  void _internal_set_found(bool value);

  public:
  // int32 price_precision = 5;
  void clear_price_precision() ;
  ::int32_t price_precision() const;
  void set_price_precision(::int32_t value);

  private:
  ::int32_t _internal_price_precision() const;
  void _internal_set_price_precision(::int32_t value);

  public:
  // double max_leverage = 4;
  void clear_max_leverage() ;
  double max_leverage() const;
  void set_max_leverage(double value);

  private:
  double _internal_max_leverage() const;
  void _internal_set_max_leverage(double value);

  public:
  // int32 quantity_precision = 6;
  void clear_quantity_precision() ;
  ::int32_t quantity_precision() const;
  void set_quantity_precision(::int32_t value);

  private:
  ::int32_t _internal_quantity_precision() const;
  void _internal_set_quantity_precision(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:symbol.SymbolResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      36, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SymbolResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    double tick_size_;
    bool found_;
    ::int32_t price_precision_;
    double max_leverage_;
    ::int32_t quantity_precision_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symbol_2eproto;
};
// -------------------------------------------------------------------

class SymbolRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:symbol.SymbolRequest) */ {
 public:
  inline SymbolRequest() : SymbolRequest(nullptr) {}
  ~SymbolRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SymbolRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SymbolRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SymbolRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SymbolRequest(const SymbolRequest& from) : SymbolRequest(nullptr, from) {}
  inline SymbolRequest(SymbolRequest&& from) noexcept
      : SymbolRequest(nullptr, std::move(from)) {}
  inline SymbolRequest& operator=(const SymbolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SymbolRequest& operator=(SymbolRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SymbolRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SymbolRequest* internal_default_instance() {
    return reinterpret_cast<const SymbolRequest*>(
        &_SymbolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SymbolRequest& a, SymbolRequest& b) { a.Swap(&b); }
  inline void Swap(SymbolRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SymbolRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SymbolRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SymbolRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SymbolRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SymbolRequest& from) { SymbolRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SymbolRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "symbol.SymbolRequest"; }

 protected:
  explicit SymbolRequest(::google::protobuf::Arena* arena);
  SymbolRequest(::google::protobuf::Arena* arena, const SymbolRequest& from);
  SymbolRequest(::google::protobuf::Arena* arena, SymbolRequest&& from) noexcept
      : SymbolRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 1,
  };
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // @@protoc_insertion_point(class_scope:symbol.SymbolRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      35, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SymbolRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symbol_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SymbolRequest

// string symbol = 1;
inline void SymbolRequest::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SymbolRequest::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:symbol.SymbolRequest.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SymbolRequest::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:symbol.SymbolRequest.symbol)
}
inline std::string* SymbolRequest::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:symbol.SymbolRequest.symbol)
  return _s;
}
inline const std::string& SymbolRequest::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void SymbolRequest::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* SymbolRequest::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* SymbolRequest::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:symbol.SymbolRequest.symbol)
  return _impl_.symbol_.Release();
}
inline void SymbolRequest::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:symbol.SymbolRequest.symbol)
}

// -------------------------------------------------------------------

// SymbolResponse

// bool found = 1;
inline void SymbolResponse::clear_found() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.found_ = false;
}
inline bool SymbolResponse::found() const {
  // @@protoc_insertion_point(field_get:symbol.SymbolResponse.found)
  return _internal_found();
}
inline void SymbolResponse::set_found(bool value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:symbol.SymbolResponse.found)
}
inline bool SymbolResponse::_internal_found() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.found_;
}
inline void SymbolResponse::_internal_set_found(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.found_ = value;
}

// string symbol = 2;
inline void SymbolResponse::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SymbolResponse::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:symbol.SymbolResponse.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SymbolResponse::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:symbol.SymbolResponse.symbol)
}
inline std::string* SymbolResponse::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:symbol.SymbolResponse.symbol)
  return _s;
}
inline const std::string& SymbolResponse::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void SymbolResponse::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* SymbolResponse::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* SymbolResponse::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:symbol.SymbolResponse.symbol)
  return _impl_.symbol_.Release();
}
inline void SymbolResponse::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:symbol.SymbolResponse.symbol)
}

// double tick_size = 3;
inline void SymbolResponse::clear_tick_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tick_size_ = 0;
}
inline double SymbolResponse::tick_size() const {
  // @@protoc_insertion_point(field_get:symbol.SymbolResponse.tick_size)
  return _internal_tick_size();
}
inline void SymbolResponse::set_tick_size(double value) {
  _internal_set_tick_size(value);
  // @@protoc_insertion_point(field_set:symbol.SymbolResponse.tick_size)
}
inline double SymbolResponse::_internal_tick_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tick_size_;
}
inline void SymbolResponse::_internal_set_tick_size(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tick_size_ = value;
}

// double max_leverage = 4;
inline void SymbolResponse::clear_max_leverage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_leverage_ = 0;
}
inline double SymbolResponse::max_leverage() const {
  // @@protoc_insertion_point(field_get:symbol.SymbolResponse.max_leverage)
  return _internal_max_leverage();
}
inline void SymbolResponse::set_max_leverage(double value) {
  _internal_set_max_leverage(value);
  // @@protoc_insertion_point(field_set:symbol.SymbolResponse.max_leverage)
}
inline double SymbolResponse::_internal_max_leverage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_leverage_;
}
inline void SymbolResponse::_internal_set_max_leverage(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_leverage_ = value;
}

// int32 price_precision = 5;
inline void SymbolResponse::clear_price_precision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_precision_ = 0;
}
inline ::int32_t SymbolResponse::price_precision() const {
  // @@protoc_insertion_point(field_get:symbol.SymbolResponse.price_precision)
  return _internal_price_precision();
}
inline void SymbolResponse::set_price_precision(::int32_t value) {
  _internal_set_price_precision(value);
  // @@protoc_insertion_point(field_set:symbol.SymbolResponse.price_precision)
}
inline ::int32_t SymbolResponse::_internal_price_precision() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_precision_;
}
inline void SymbolResponse::_internal_set_price_precision(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_precision_ = value;
}

// int32 quantity_precision = 6;
inline void SymbolResponse::clear_quantity_precision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_precision_ = 0;
}
inline ::int32_t SymbolResponse::quantity_precision() const {
  // @@protoc_insertion_point(field_get:symbol.SymbolResponse.quantity_precision)
  return _internal_quantity_precision();
}
inline void SymbolResponse::set_quantity_precision(::int32_t value) {
  _internal_set_quantity_precision(value);
  // @@protoc_insertion_point(field_set:symbol.SymbolResponse.quantity_precision)
}
inline ::int32_t SymbolResponse::_internal_quantity_precision() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quantity_precision_;
}
inline void SymbolResponse::_internal_set_quantity_precision(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_precision_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace symbol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // symbol_2eproto_2epb_2eh
