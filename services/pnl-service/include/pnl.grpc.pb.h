// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pnl.proto
#ifndef GRPC_pnl_2eproto__INCLUDED
#define GRPC_pnl_2eproto__INCLUDED

#include "pnl.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace pnl {

class PnLService final {
 public:
  static constexpr char const* service_full_name() {
    return "pnl.PnLService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetEquity(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::pnl::PnLResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pnl::PnLResponse>> AsyncGetEquity(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pnl::PnLResponse>>(AsyncGetEquityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pnl::PnLResponse>> PrepareAsyncGetEquity(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pnl::PnLResponse>>(PrepareAsyncGetEquityRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckLiquidation(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::pnl::LiquidationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pnl::LiquidationResponse>> AsyncCheckLiquidation(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pnl::LiquidationResponse>>(AsyncCheckLiquidationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pnl::LiquidationResponse>> PrepareAsyncCheckLiquidation(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pnl::LiquidationResponse>>(PrepareAsyncCheckLiquidationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllPnL(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::pnl::AllPnLResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pnl::AllPnLResponse>> AsyncGetAllPnL(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pnl::AllPnLResponse>>(AsyncGetAllPnLRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pnl::AllPnLResponse>> PrepareAsyncGetAllPnL(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pnl::AllPnLResponse>>(PrepareAsyncGetAllPnLRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateWallet(::grpc::ClientContext* context, const ::pnl::WalletRequest& request, ::pnl::WalletResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pnl::WalletResponse>> AsyncUpdateWallet(::grpc::ClientContext* context, const ::pnl::WalletRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pnl::WalletResponse>>(AsyncUpdateWalletRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pnl::WalletResponse>> PrepareAsyncUpdateWallet(::grpc::ClientContext* context, const ::pnl::WalletRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pnl::WalletResponse>>(PrepareAsyncUpdateWalletRaw(context, request, cq));
    }
    virtual ::grpc::Status SendTrade(::grpc::ClientContext* context, const ::pnl::TradeUpdate& request, ::pnl::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pnl::Empty>> AsyncSendTrade(::grpc::ClientContext* context, const ::pnl::TradeUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pnl::Empty>>(AsyncSendTradeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pnl::Empty>> PrepareAsyncSendTrade(::grpc::ClientContext* context, const ::pnl::TradeUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pnl::Empty>>(PrepareAsyncSendTradeRaw(context, request, cq));
    }
    // for testing
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetEquity(::grpc::ClientContext* context, const ::pnl::PnLRequest* request, ::pnl::PnLResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEquity(::grpc::ClientContext* context, const ::pnl::PnLRequest* request, ::pnl::PnLResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CheckLiquidation(::grpc::ClientContext* context, const ::pnl::PnLRequest* request, ::pnl::LiquidationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckLiquidation(::grpc::ClientContext* context, const ::pnl::PnLRequest* request, ::pnl::LiquidationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllPnL(::grpc::ClientContext* context, const ::pnl::PnLRequest* request, ::pnl::AllPnLResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllPnL(::grpc::ClientContext* context, const ::pnl::PnLRequest* request, ::pnl::AllPnLResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateWallet(::grpc::ClientContext* context, const ::pnl::WalletRequest* request, ::pnl::WalletResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateWallet(::grpc::ClientContext* context, const ::pnl::WalletRequest* request, ::pnl::WalletResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendTrade(::grpc::ClientContext* context, const ::pnl::TradeUpdate* request, ::pnl::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendTrade(::grpc::ClientContext* context, const ::pnl::TradeUpdate* request, ::pnl::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // for testing
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pnl::PnLResponse>* AsyncGetEquityRaw(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pnl::PnLResponse>* PrepareAsyncGetEquityRaw(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pnl::LiquidationResponse>* AsyncCheckLiquidationRaw(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pnl::LiquidationResponse>* PrepareAsyncCheckLiquidationRaw(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pnl::AllPnLResponse>* AsyncGetAllPnLRaw(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pnl::AllPnLResponse>* PrepareAsyncGetAllPnLRaw(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pnl::WalletResponse>* AsyncUpdateWalletRaw(::grpc::ClientContext* context, const ::pnl::WalletRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pnl::WalletResponse>* PrepareAsyncUpdateWalletRaw(::grpc::ClientContext* context, const ::pnl::WalletRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pnl::Empty>* AsyncSendTradeRaw(::grpc::ClientContext* context, const ::pnl::TradeUpdate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pnl::Empty>* PrepareAsyncSendTradeRaw(::grpc::ClientContext* context, const ::pnl::TradeUpdate& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetEquity(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::pnl::PnLResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pnl::PnLResponse>> AsyncGetEquity(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pnl::PnLResponse>>(AsyncGetEquityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pnl::PnLResponse>> PrepareAsyncGetEquity(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pnl::PnLResponse>>(PrepareAsyncGetEquityRaw(context, request, cq));
    }
    ::grpc::Status CheckLiquidation(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::pnl::LiquidationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pnl::LiquidationResponse>> AsyncCheckLiquidation(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pnl::LiquidationResponse>>(AsyncCheckLiquidationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pnl::LiquidationResponse>> PrepareAsyncCheckLiquidation(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pnl::LiquidationResponse>>(PrepareAsyncCheckLiquidationRaw(context, request, cq));
    }
    ::grpc::Status GetAllPnL(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::pnl::AllPnLResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pnl::AllPnLResponse>> AsyncGetAllPnL(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pnl::AllPnLResponse>>(AsyncGetAllPnLRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pnl::AllPnLResponse>> PrepareAsyncGetAllPnL(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pnl::AllPnLResponse>>(PrepareAsyncGetAllPnLRaw(context, request, cq));
    }
    ::grpc::Status UpdateWallet(::grpc::ClientContext* context, const ::pnl::WalletRequest& request, ::pnl::WalletResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pnl::WalletResponse>> AsyncUpdateWallet(::grpc::ClientContext* context, const ::pnl::WalletRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pnl::WalletResponse>>(AsyncUpdateWalletRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pnl::WalletResponse>> PrepareAsyncUpdateWallet(::grpc::ClientContext* context, const ::pnl::WalletRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pnl::WalletResponse>>(PrepareAsyncUpdateWalletRaw(context, request, cq));
    }
    ::grpc::Status SendTrade(::grpc::ClientContext* context, const ::pnl::TradeUpdate& request, ::pnl::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pnl::Empty>> AsyncSendTrade(::grpc::ClientContext* context, const ::pnl::TradeUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pnl::Empty>>(AsyncSendTradeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pnl::Empty>> PrepareAsyncSendTrade(::grpc::ClientContext* context, const ::pnl::TradeUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pnl::Empty>>(PrepareAsyncSendTradeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetEquity(::grpc::ClientContext* context, const ::pnl::PnLRequest* request, ::pnl::PnLResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEquity(::grpc::ClientContext* context, const ::pnl::PnLRequest* request, ::pnl::PnLResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CheckLiquidation(::grpc::ClientContext* context, const ::pnl::PnLRequest* request, ::pnl::LiquidationResponse* response, std::function<void(::grpc::Status)>) override;
      void CheckLiquidation(::grpc::ClientContext* context, const ::pnl::PnLRequest* request, ::pnl::LiquidationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllPnL(::grpc::ClientContext* context, const ::pnl::PnLRequest* request, ::pnl::AllPnLResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAllPnL(::grpc::ClientContext* context, const ::pnl::PnLRequest* request, ::pnl::AllPnLResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateWallet(::grpc::ClientContext* context, const ::pnl::WalletRequest* request, ::pnl::WalletResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateWallet(::grpc::ClientContext* context, const ::pnl::WalletRequest* request, ::pnl::WalletResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendTrade(::grpc::ClientContext* context, const ::pnl::TradeUpdate* request, ::pnl::Empty* response, std::function<void(::grpc::Status)>) override;
      void SendTrade(::grpc::ClientContext* context, const ::pnl::TradeUpdate* request, ::pnl::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::pnl::PnLResponse>* AsyncGetEquityRaw(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pnl::PnLResponse>* PrepareAsyncGetEquityRaw(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pnl::LiquidationResponse>* AsyncCheckLiquidationRaw(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pnl::LiquidationResponse>* PrepareAsyncCheckLiquidationRaw(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pnl::AllPnLResponse>* AsyncGetAllPnLRaw(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pnl::AllPnLResponse>* PrepareAsyncGetAllPnLRaw(::grpc::ClientContext* context, const ::pnl::PnLRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pnl::WalletResponse>* AsyncUpdateWalletRaw(::grpc::ClientContext* context, const ::pnl::WalletRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pnl::WalletResponse>* PrepareAsyncUpdateWalletRaw(::grpc::ClientContext* context, const ::pnl::WalletRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pnl::Empty>* AsyncSendTradeRaw(::grpc::ClientContext* context, const ::pnl::TradeUpdate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pnl::Empty>* PrepareAsyncSendTradeRaw(::grpc::ClientContext* context, const ::pnl::TradeUpdate& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetEquity_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckLiquidation_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllPnL_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateWallet_;
    const ::grpc::internal::RpcMethod rpcmethod_SendTrade_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetEquity(::grpc::ServerContext* context, const ::pnl::PnLRequest* request, ::pnl::PnLResponse* response);
    virtual ::grpc::Status CheckLiquidation(::grpc::ServerContext* context, const ::pnl::PnLRequest* request, ::pnl::LiquidationResponse* response);
    virtual ::grpc::Status GetAllPnL(::grpc::ServerContext* context, const ::pnl::PnLRequest* request, ::pnl::AllPnLResponse* response);
    virtual ::grpc::Status UpdateWallet(::grpc::ServerContext* context, const ::pnl::WalletRequest* request, ::pnl::WalletResponse* response);
    virtual ::grpc::Status SendTrade(::grpc::ServerContext* context, const ::pnl::TradeUpdate* request, ::pnl::Empty* response);
    // for testing
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEquity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEquity() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetEquity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEquity(::grpc::ServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::PnLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEquity(::grpc::ServerContext* context, ::pnl::PnLRequest* request, ::grpc::ServerAsyncResponseWriter< ::pnl::PnLResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckLiquidation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckLiquidation() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CheckLiquidation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckLiquidation(::grpc::ServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::LiquidationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckLiquidation(::grpc::ServerContext* context, ::pnl::PnLRequest* request, ::grpc::ServerAsyncResponseWriter< ::pnl::LiquidationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllPnL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllPnL() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetAllPnL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllPnL(::grpc::ServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::AllPnLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllPnL(::grpc::ServerContext* context, ::pnl::PnLRequest* request, ::grpc::ServerAsyncResponseWriter< ::pnl::AllPnLResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateWallet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateWallet() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateWallet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWallet(::grpc::ServerContext* /*context*/, const ::pnl::WalletRequest* /*request*/, ::pnl::WalletResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateWallet(::grpc::ServerContext* context, ::pnl::WalletRequest* request, ::grpc::ServerAsyncResponseWriter< ::pnl::WalletResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendTrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendTrade() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SendTrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTrade(::grpc::ServerContext* /*context*/, const ::pnl::TradeUpdate* /*request*/, ::pnl::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendTrade(::grpc::ServerContext* context, ::pnl::TradeUpdate* request, ::grpc::ServerAsyncResponseWriter< ::pnl::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetEquity<WithAsyncMethod_CheckLiquidation<WithAsyncMethod_GetAllPnL<WithAsyncMethod_UpdateWallet<WithAsyncMethod_SendTrade<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetEquity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetEquity() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::pnl::PnLRequest, ::pnl::PnLResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pnl::PnLRequest* request, ::pnl::PnLResponse* response) { return this->GetEquity(context, request, response); }));}
    void SetMessageAllocatorFor_GetEquity(
        ::grpc::MessageAllocator< ::pnl::PnLRequest, ::pnl::PnLResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pnl::PnLRequest, ::pnl::PnLResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetEquity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEquity(::grpc::ServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::PnLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEquity(
      ::grpc::CallbackServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::PnLResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CheckLiquidation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckLiquidation() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::pnl::PnLRequest, ::pnl::LiquidationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pnl::PnLRequest* request, ::pnl::LiquidationResponse* response) { return this->CheckLiquidation(context, request, response); }));}
    void SetMessageAllocatorFor_CheckLiquidation(
        ::grpc::MessageAllocator< ::pnl::PnLRequest, ::pnl::LiquidationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pnl::PnLRequest, ::pnl::LiquidationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckLiquidation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckLiquidation(::grpc::ServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::LiquidationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckLiquidation(
      ::grpc::CallbackServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::LiquidationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllPnL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllPnL() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::pnl::PnLRequest, ::pnl::AllPnLResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pnl::PnLRequest* request, ::pnl::AllPnLResponse* response) { return this->GetAllPnL(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllPnL(
        ::grpc::MessageAllocator< ::pnl::PnLRequest, ::pnl::AllPnLResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pnl::PnLRequest, ::pnl::AllPnLResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllPnL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllPnL(::grpc::ServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::AllPnLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllPnL(
      ::grpc::CallbackServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::AllPnLResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateWallet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateWallet() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::pnl::WalletRequest, ::pnl::WalletResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pnl::WalletRequest* request, ::pnl::WalletResponse* response) { return this->UpdateWallet(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateWallet(
        ::grpc::MessageAllocator< ::pnl::WalletRequest, ::pnl::WalletResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pnl::WalletRequest, ::pnl::WalletResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateWallet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWallet(::grpc::ServerContext* /*context*/, const ::pnl::WalletRequest* /*request*/, ::pnl::WalletResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateWallet(
      ::grpc::CallbackServerContext* /*context*/, const ::pnl::WalletRequest* /*request*/, ::pnl::WalletResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendTrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendTrade() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::pnl::TradeUpdate, ::pnl::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pnl::TradeUpdate* request, ::pnl::Empty* response) { return this->SendTrade(context, request, response); }));}
    void SetMessageAllocatorFor_SendTrade(
        ::grpc::MessageAllocator< ::pnl::TradeUpdate, ::pnl::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pnl::TradeUpdate, ::pnl::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendTrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTrade(::grpc::ServerContext* /*context*/, const ::pnl::TradeUpdate* /*request*/, ::pnl::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendTrade(
      ::grpc::CallbackServerContext* /*context*/, const ::pnl::TradeUpdate* /*request*/, ::pnl::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetEquity<WithCallbackMethod_CheckLiquidation<WithCallbackMethod_GetAllPnL<WithCallbackMethod_UpdateWallet<WithCallbackMethod_SendTrade<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetEquity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEquity() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetEquity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEquity(::grpc::ServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::PnLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckLiquidation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckLiquidation() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CheckLiquidation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckLiquidation(::grpc::ServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::LiquidationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllPnL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllPnL() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetAllPnL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllPnL(::grpc::ServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::AllPnLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateWallet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateWallet() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateWallet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWallet(::grpc::ServerContext* /*context*/, const ::pnl::WalletRequest* /*request*/, ::pnl::WalletResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendTrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendTrade() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SendTrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTrade(::grpc::ServerContext* /*context*/, const ::pnl::TradeUpdate* /*request*/, ::pnl::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEquity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEquity() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetEquity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEquity(::grpc::ServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::PnLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEquity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckLiquidation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckLiquidation() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CheckLiquidation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckLiquidation(::grpc::ServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::LiquidationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckLiquidation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllPnL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllPnL() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetAllPnL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllPnL(::grpc::ServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::AllPnLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllPnL(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateWallet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateWallet() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateWallet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWallet(::grpc::ServerContext* /*context*/, const ::pnl::WalletRequest* /*request*/, ::pnl::WalletResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateWallet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendTrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendTrade() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SendTrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTrade(::grpc::ServerContext* /*context*/, const ::pnl::TradeUpdate* /*request*/, ::pnl::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendTrade(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetEquity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetEquity() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEquity(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetEquity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEquity(::grpc::ServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::PnLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEquity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckLiquidation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckLiquidation() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckLiquidation(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckLiquidation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckLiquidation(::grpc::ServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::LiquidationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckLiquidation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllPnL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllPnL() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllPnL(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllPnL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllPnL(::grpc::ServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::AllPnLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllPnL(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateWallet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateWallet() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateWallet(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateWallet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWallet(::grpc::ServerContext* /*context*/, const ::pnl::WalletRequest* /*request*/, ::pnl::WalletResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateWallet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendTrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendTrade() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendTrade(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendTrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTrade(::grpc::ServerContext* /*context*/, const ::pnl::TradeUpdate* /*request*/, ::pnl::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendTrade(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEquity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEquity() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pnl::PnLRequest, ::pnl::PnLResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pnl::PnLRequest, ::pnl::PnLResponse>* streamer) {
                       return this->StreamedGetEquity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEquity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEquity(::grpc::ServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::PnLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEquity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pnl::PnLRequest,::pnl::PnLResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckLiquidation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckLiquidation() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pnl::PnLRequest, ::pnl::LiquidationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pnl::PnLRequest, ::pnl::LiquidationResponse>* streamer) {
                       return this->StreamedCheckLiquidation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckLiquidation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckLiquidation(::grpc::ServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::LiquidationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckLiquidation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pnl::PnLRequest,::pnl::LiquidationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllPnL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllPnL() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pnl::PnLRequest, ::pnl::AllPnLResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pnl::PnLRequest, ::pnl::AllPnLResponse>* streamer) {
                       return this->StreamedGetAllPnL(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllPnL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllPnL(::grpc::ServerContext* /*context*/, const ::pnl::PnLRequest* /*request*/, ::pnl::AllPnLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllPnL(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pnl::PnLRequest,::pnl::AllPnLResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateWallet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateWallet() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pnl::WalletRequest, ::pnl::WalletResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pnl::WalletRequest, ::pnl::WalletResponse>* streamer) {
                       return this->StreamedUpdateWallet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateWallet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateWallet(::grpc::ServerContext* /*context*/, const ::pnl::WalletRequest* /*request*/, ::pnl::WalletResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateWallet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pnl::WalletRequest,::pnl::WalletResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendTrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendTrade() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pnl::TradeUpdate, ::pnl::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pnl::TradeUpdate, ::pnl::Empty>* streamer) {
                       return this->StreamedSendTrade(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendTrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendTrade(::grpc::ServerContext* /*context*/, const ::pnl::TradeUpdate* /*request*/, ::pnl::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendTrade(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pnl::TradeUpdate,::pnl::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetEquity<WithStreamedUnaryMethod_CheckLiquidation<WithStreamedUnaryMethod_GetAllPnL<WithStreamedUnaryMethod_UpdateWallet<WithStreamedUnaryMethod_SendTrade<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetEquity<WithStreamedUnaryMethod_CheckLiquidation<WithStreamedUnaryMethod_GetAllPnL<WithStreamedUnaryMethod_UpdateWallet<WithStreamedUnaryMethod_SendTrade<Service > > > > > StreamedService;
};

}  // namespace pnl


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_pnl_2eproto__INCLUDED
