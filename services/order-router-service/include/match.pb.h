// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: match.proto
// Protobuf C++ Version: 5.29.3

#ifndef match_2eproto_2epb_2eh
#define match_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_match_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_match_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_match_2eproto;
namespace match {
class CancelRequest;
struct CancelRequestDefaultTypeInternal;
extern CancelRequestDefaultTypeInternal _CancelRequest_default_instance_;
class CancelResponse;
struct CancelResponseDefaultTypeInternal;
extern CancelResponseDefaultTypeInternal _CancelResponse_default_instance_;
class ModifyRequest;
struct ModifyRequestDefaultTypeInternal;
extern ModifyRequestDefaultTypeInternal _ModifyRequest_default_instance_;
class ModifyResponse;
struct ModifyResponseDefaultTypeInternal;
extern ModifyResponseDefaultTypeInternal _ModifyResponse_default_instance_;
class OrderRequest;
struct OrderRequestDefaultTypeInternal;
extern OrderRequestDefaultTypeInternal _OrderRequest_default_instance_;
class Trade;
struct TradeDefaultTypeInternal;
extern TradeDefaultTypeInternal _Trade_default_instance_;
class TradeResponse;
struct TradeResponseDefaultTypeInternal;
extern TradeResponseDefaultTypeInternal _TradeResponse_default_instance_;
}  // namespace match
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace match {

// ===================================================================


// -------------------------------------------------------------------

class Trade final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:match.Trade) */ {
 public:
  inline Trade() : Trade(nullptr) {}
  ~Trade() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Trade* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Trade));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Trade(
      ::google::protobuf::internal::ConstantInitialized);

  inline Trade(const Trade& from) : Trade(nullptr, from) {}
  inline Trade(Trade&& from) noexcept
      : Trade(nullptr, std::move(from)) {}
  inline Trade& operator=(const Trade& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trade& operator=(Trade&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Trade& default_instance() {
    return *internal_default_instance();
  }
  static inline const Trade* internal_default_instance() {
    return reinterpret_cast<const Trade*>(
        &_Trade_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Trade& a, Trade& b) { a.Swap(&b); }
  inline void Swap(Trade* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trade* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Trade* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Trade>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Trade& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Trade& from) { Trade::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Trade* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "match.Trade"; }

 protected:
  explicit Trade(::google::protobuf::Arena* arena);
  Trade(::google::protobuf::Arena* arena, const Trade& from);
  Trade(::google::protobuf::Arena* arena, Trade&& from) noexcept
      : Trade(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMakerOrderIdFieldNumber = 1,
    kTakerOrderIdFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kTimestampFieldNumber = 6,
    kPriceFieldNumber = 4,
    kQuantityFieldNumber = 5,
  };
  // string makerOrderId = 1;
  void clear_makerorderid() ;
  const std::string& makerorderid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_makerorderid(Arg_&& arg, Args_... args);
  std::string* mutable_makerorderid();
  PROTOBUF_NODISCARD std::string* release_makerorderid();
  void set_allocated_makerorderid(std::string* value);

  private:
  const std::string& _internal_makerorderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_makerorderid(
      const std::string& value);
  std::string* _internal_mutable_makerorderid();

  public:
  // string takerOrderId = 2;
  void clear_takerorderid() ;
  const std::string& takerorderid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_takerorderid(Arg_&& arg, Args_... args);
  std::string* mutable_takerorderid();
  PROTOBUF_NODISCARD std::string* release_takerorderid();
  void set_allocated_takerorderid(std::string* value);

  private:
  const std::string& _internal_takerorderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_takerorderid(
      const std::string& value);
  std::string* _internal_mutable_takerorderid();

  public:
  // string symbol = 3;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string timestamp = 6;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // double price = 4;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // double quantity = 5;
  void clear_quantity() ;
  double quantity() const;
  void set_quantity(double value);

  private:
  double _internal_quantity() const;
  void _internal_set_quantity(double value);

  public:
  // @@protoc_insertion_point(class_scope:match.Trade)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Trade& from_msg);
    ::google::protobuf::internal::ArenaStringPtr makerorderid_;
    ::google::protobuf::internal::ArenaStringPtr takerorderid_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    double price_;
    double quantity_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class OrderRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:match.OrderRequest) */ {
 public:
  inline OrderRequest() : OrderRequest(nullptr) {}
  ~OrderRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OrderRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OrderRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OrderRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline OrderRequest(const OrderRequest& from) : OrderRequest(nullptr, from) {}
  inline OrderRequest(OrderRequest&& from) noexcept
      : OrderRequest(nullptr, std::move(from)) {}
  inline OrderRequest& operator=(const OrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderRequest& operator=(OrderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderRequest* internal_default_instance() {
    return reinterpret_cast<const OrderRequest*>(
        &_OrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(OrderRequest& a, OrderRequest& b) { a.Swap(&b); }
  inline void Swap(OrderRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<OrderRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OrderRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OrderRequest& from) { OrderRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OrderRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "match.OrderRequest"; }

 protected:
  explicit OrderRequest(::google::protobuf::Arena* arena);
  OrderRequest(::google::protobuf::Arena* arena, const OrderRequest& from);
  OrderRequest(::google::protobuf::Arena* arena, OrderRequest&& from) noexcept
      : OrderRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOrderIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kDirectionFieldNumber = 6,
    kOrdertypeFieldNumber = 7,
    kTifFieldNumber = 8,
    kPriceFieldNumber = 4,
    kQuantityFieldNumber = 5,
    kTriggerPriceFieldNumber = 9,
  };
  // optional string orderId = 1;
  bool has_orderid() const;
  void clear_orderid() ;
  const std::string& orderid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_orderid(Arg_&& arg, Args_... args);
  std::string* mutable_orderid();
  PROTOBUF_NODISCARD std::string* release_orderid();
  void set_allocated_orderid(std::string* value);

  private:
  const std::string& _internal_orderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_orderid(
      const std::string& value);
  std::string* _internal_mutable_orderid();

  public:
  // optional string userId = 2;
  bool has_userid() const;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string symbol = 3;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string direction = 6;
  void clear_direction() ;
  const std::string& direction() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_direction(Arg_&& arg, Args_... args);
  std::string* mutable_direction();
  PROTOBUF_NODISCARD std::string* release_direction();
  void set_allocated_direction(std::string* value);

  private:
  const std::string& _internal_direction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_direction(
      const std::string& value);
  std::string* _internal_mutable_direction();

  public:
  // optional string ordertype = 7;
  bool has_ordertype() const;
  void clear_ordertype() ;
  const std::string& ordertype() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ordertype(Arg_&& arg, Args_... args);
  std::string* mutable_ordertype();
  PROTOBUF_NODISCARD std::string* release_ordertype();
  void set_allocated_ordertype(std::string* value);

  private:
  const std::string& _internal_ordertype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ordertype(
      const std::string& value);
  std::string* _internal_mutable_ordertype();

  public:
  // optional string tif = 8;
  bool has_tif() const;
  void clear_tif() ;
  const std::string& tif() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tif(Arg_&& arg, Args_... args);
  std::string* mutable_tif();
  PROTOBUF_NODISCARD std::string* release_tif();
  void set_allocated_tif(std::string* value);

  private:
  const std::string& _internal_tif() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tif(
      const std::string& value);
  std::string* _internal_mutable_tif();

  public:
  // double price = 4;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // double quantity = 5;
  void clear_quantity() ;
  double quantity() const;
  void set_quantity(double value);

  private:
  double _internal_quantity() const;
  void _internal_set_quantity(double value);

  public:
  // optional double trigger_price = 9;
  bool has_trigger_price() const;
  void clear_trigger_price() ;
  double trigger_price() const;
  void set_trigger_price(double value);

  private:
  double _internal_trigger_price() const;
  void _internal_set_trigger_price(double value);

  public:
  // @@protoc_insertion_point(class_scope:match.OrderRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      75, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OrderRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr orderid_;
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr direction_;
    ::google::protobuf::internal::ArenaStringPtr ordertype_;
    ::google::protobuf::internal::ArenaStringPtr tif_;
    double price_;
    double quantity_;
    double trigger_price_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class ModifyResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:match.ModifyResponse) */ {
 public:
  inline ModifyResponse() : ModifyResponse(nullptr) {}
  ~ModifyResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ModifyResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ModifyResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ModifyResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ModifyResponse(const ModifyResponse& from) : ModifyResponse(nullptr, from) {}
  inline ModifyResponse(ModifyResponse&& from) noexcept
      : ModifyResponse(nullptr, std::move(from)) {}
  inline ModifyResponse& operator=(const ModifyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyResponse& operator=(ModifyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModifyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyResponse* internal_default_instance() {
    return reinterpret_cast<const ModifyResponse*>(
        &_ModifyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ModifyResponse& a, ModifyResponse& b) { a.Swap(&b); }
  inline void Swap(ModifyResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModifyResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ModifyResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModifyResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ModifyResponse& from) { ModifyResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ModifyResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "match.ModifyResponse"; }

 protected:
  explicit ModifyResponse(::google::protobuf::Arena* arena);
  ModifyResponse(::google::protobuf::Arena* arena, const ModifyResponse& from);
  ModifyResponse(::google::protobuf::Arena* arena, ModifyResponse&& from) noexcept
      : ModifyResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:match.ModifyResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ModifyResponse& from_msg);
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class ModifyRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:match.ModifyRequest) */ {
 public:
  inline ModifyRequest() : ModifyRequest(nullptr) {}
  ~ModifyRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ModifyRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ModifyRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ModifyRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ModifyRequest(const ModifyRequest& from) : ModifyRequest(nullptr, from) {}
  inline ModifyRequest(ModifyRequest&& from) noexcept
      : ModifyRequest(nullptr, std::move(from)) {}
  inline ModifyRequest& operator=(const ModifyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyRequest& operator=(ModifyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModifyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyRequest* internal_default_instance() {
    return reinterpret_cast<const ModifyRequest*>(
        &_ModifyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ModifyRequest& a, ModifyRequest& b) { a.Swap(&b); }
  inline void Swap(ModifyRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModifyRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ModifyRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModifyRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ModifyRequest& from) { ModifyRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ModifyRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "match.ModifyRequest"; }

 protected:
  explicit ModifyRequest(::google::protobuf::Arena* arena);
  ModifyRequest(::google::protobuf::Arena* arena, const ModifyRequest& from);
  ModifyRequest(::google::protobuf::Arena* arena, ModifyRequest&& from) noexcept
      : ModifyRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOrderIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kDirectionFieldNumber = 6,
    kNewPriceFieldNumber = 4,
    kNewQuantityFieldNumber = 5,
  };
  // optional string orderId = 1;
  bool has_orderid() const;
  void clear_orderid() ;
  const std::string& orderid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_orderid(Arg_&& arg, Args_... args);
  std::string* mutable_orderid();
  PROTOBUF_NODISCARD std::string* release_orderid();
  void set_allocated_orderid(std::string* value);

  private:
  const std::string& _internal_orderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_orderid(
      const std::string& value);
  std::string* _internal_mutable_orderid();

  public:
  // optional string userId = 2;
  bool has_userid() const;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string symbol = 3;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string direction = 6;
  void clear_direction() ;
  const std::string& direction() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_direction(Arg_&& arg, Args_... args);
  std::string* mutable_direction();
  PROTOBUF_NODISCARD std::string* release_direction();
  void set_allocated_direction(std::string* value);

  private:
  const std::string& _internal_direction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_direction(
      const std::string& value);
  std::string* _internal_mutable_direction();

  public:
  // double new_price = 4;
  void clear_new_price() ;
  double new_price() const;
  void set_new_price(double value);

  private:
  double _internal_new_price() const;
  void _internal_set_new_price(double value);

  public:
  // double new_quantity = 5;
  void clear_new_quantity() ;
  double new_quantity() const;
  void set_new_quantity(double value);

  private:
  double _internal_new_quantity() const;
  void _internal_set_new_quantity(double value);

  public:
  // @@protoc_insertion_point(class_scope:match.ModifyRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ModifyRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr orderid_;
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr direction_;
    double new_price_;
    double new_quantity_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class CancelResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:match.CancelResponse) */ {
 public:
  inline CancelResponse() : CancelResponse(nullptr) {}
  ~CancelResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CancelResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CancelResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CancelResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CancelResponse(const CancelResponse& from) : CancelResponse(nullptr, from) {}
  inline CancelResponse(CancelResponse&& from) noexcept
      : CancelResponse(nullptr, std::move(from)) {}
  inline CancelResponse& operator=(const CancelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelResponse& operator=(CancelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelResponse* internal_default_instance() {
    return reinterpret_cast<const CancelResponse*>(
        &_CancelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(CancelResponse& a, CancelResponse& b) { a.Swap(&b); }
  inline void Swap(CancelResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CancelResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CancelResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CancelResponse& from) { CancelResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CancelResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "match.CancelResponse"; }

 protected:
  explicit CancelResponse(::google::protobuf::Arena* arena);
  CancelResponse(::google::protobuf::Arena* arena, const CancelResponse& from);
  CancelResponse(::google::protobuf::Arena* arena, CancelResponse&& from) noexcept
      : CancelResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:match.CancelResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CancelResponse& from_msg);
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class CancelRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:match.CancelRequest) */ {
 public:
  inline CancelRequest() : CancelRequest(nullptr) {}
  ~CancelRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CancelRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CancelRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CancelRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CancelRequest(const CancelRequest& from) : CancelRequest(nullptr, from) {}
  inline CancelRequest(CancelRequest&& from) noexcept
      : CancelRequest(nullptr, std::move(from)) {}
  inline CancelRequest& operator=(const CancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelRequest& operator=(CancelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelRequest* internal_default_instance() {
    return reinterpret_cast<const CancelRequest*>(
        &_CancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(CancelRequest& a, CancelRequest& b) { a.Swap(&b); }
  inline void Swap(CancelRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CancelRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CancelRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CancelRequest& from) { CancelRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CancelRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "match.CancelRequest"; }

 protected:
  explicit CancelRequest(::google::protobuf::Arena* arena);
  CancelRequest(::google::protobuf::Arena* arena, const CancelRequest& from);
  CancelRequest(::google::protobuf::Arena* arena, CancelRequest&& from) noexcept
      : CancelRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 1,
    kOrderIdFieldNumber = 2,
  };
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string orderId = 2;
  void clear_orderid() ;
  const std::string& orderid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_orderid(Arg_&& arg, Args_... args);
  std::string* mutable_orderid();
  PROTOBUF_NODISCARD std::string* release_orderid();
  void set_allocated_orderid(std::string* value);

  private:
  const std::string& _internal_orderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_orderid(
      const std::string& value);
  std::string* _internal_mutable_orderid();

  public:
  // @@protoc_insertion_point(class_scope:match.CancelRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      41, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CancelRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr orderid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class TradeResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:match.TradeResponse) */ {
 public:
  inline TradeResponse() : TradeResponse(nullptr) {}
  ~TradeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TradeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TradeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TradeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline TradeResponse(const TradeResponse& from) : TradeResponse(nullptr, from) {}
  inline TradeResponse(TradeResponse&& from) noexcept
      : TradeResponse(nullptr, std::move(from)) {}
  inline TradeResponse& operator=(const TradeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeResponse& operator=(TradeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradeResponse* internal_default_instance() {
    return reinterpret_cast<const TradeResponse*>(
        &_TradeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(TradeResponse& a, TradeResponse& b) { a.Swap(&b); }
  inline void Swap(TradeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TradeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TradeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TradeResponse& from) { TradeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TradeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "match.TradeResponse"; }

 protected:
  explicit TradeResponse(::google::protobuf::Arena* arena);
  TradeResponse(::google::protobuf::Arena* arena, const TradeResponse& from);
  TradeResponse(::google::protobuf::Arena* arena, TradeResponse&& from) noexcept
      : TradeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTradesFieldNumber = 1,
  };
  // repeated .match.Trade trades = 1;
  int trades_size() const;
  private:
  int _internal_trades_size() const;

  public:
  void clear_trades() ;
  ::match::Trade* mutable_trades(int index);
  ::google::protobuf::RepeatedPtrField<::match::Trade>* mutable_trades();

  private:
  const ::google::protobuf::RepeatedPtrField<::match::Trade>& _internal_trades() const;
  ::google::protobuf::RepeatedPtrField<::match::Trade>* _internal_mutable_trades();
  public:
  const ::match::Trade& trades(int index) const;
  ::match::Trade* add_trades();
  const ::google::protobuf::RepeatedPtrField<::match::Trade>& trades() const;
  // @@protoc_insertion_point(class_scope:match.TradeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TradeResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::match::Trade > trades_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_match_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OrderRequest

// optional string orderId = 1;
inline bool OrderRequest::has_orderid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void OrderRequest::clear_orderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orderid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OrderRequest::orderid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:match.OrderRequest.orderId)
  return _internal_orderid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderRequest::set_orderid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.orderid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:match.OrderRequest.orderId)
}
inline std::string* OrderRequest::mutable_orderid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_orderid();
  // @@protoc_insertion_point(field_mutable:match.OrderRequest.orderId)
  return _s;
}
inline const std::string& OrderRequest::_internal_orderid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.orderid_.Get();
}
inline void OrderRequest::_internal_set_orderid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.orderid_.Set(value, GetArena());
}
inline std::string* OrderRequest::_internal_mutable_orderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.orderid_.Mutable( GetArena());
}
inline std::string* OrderRequest::release_orderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:match.OrderRequest.orderId)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.orderid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.orderid_.Set("", GetArena());
  }
  return released;
}
inline void OrderRequest::set_allocated_orderid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.orderid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.orderid_.IsDefault()) {
    _impl_.orderid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:match.OrderRequest.orderId)
}

// optional string userId = 2;
inline bool OrderRequest::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void OrderRequest::clear_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OrderRequest::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:match.OrderRequest.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderRequest::set_userid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:match.OrderRequest.userId)
}
inline std::string* OrderRequest::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:match.OrderRequest.userId)
  return _s;
}
inline const std::string& OrderRequest::_internal_userid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.userid_.Get();
}
inline void OrderRequest::_internal_set_userid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* OrderRequest::_internal_mutable_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* OrderRequest::release_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:match.OrderRequest.userId)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.userid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.userid_.Set("", GetArena());
  }
  return released;
}
inline void OrderRequest::set_allocated_userid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.userid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:match.OrderRequest.userId)
}

// string symbol = 3;
inline void OrderRequest::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& OrderRequest::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:match.OrderRequest.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderRequest::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:match.OrderRequest.symbol)
}
inline std::string* OrderRequest::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:match.OrderRequest.symbol)
  return _s;
}
inline const std::string& OrderRequest::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void OrderRequest::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* OrderRequest::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* OrderRequest::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:match.OrderRequest.symbol)
  return _impl_.symbol_.Release();
}
inline void OrderRequest::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:match.OrderRequest.symbol)
}

// double price = 4;
inline void OrderRequest::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
}
inline double OrderRequest::price() const {
  // @@protoc_insertion_point(field_get:match.OrderRequest.price)
  return _internal_price();
}
inline void OrderRequest::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:match.OrderRequest.price)
}
inline double OrderRequest::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void OrderRequest::_internal_set_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// double quantity = 5;
inline void OrderRequest::clear_quantity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = 0;
}
inline double OrderRequest::quantity() const {
  // @@protoc_insertion_point(field_get:match.OrderRequest.quantity)
  return _internal_quantity();
}
inline void OrderRequest::set_quantity(double value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:match.OrderRequest.quantity)
}
inline double OrderRequest::_internal_quantity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quantity_;
}
inline void OrderRequest::_internal_set_quantity(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = value;
}

// string direction = 6;
inline void OrderRequest::clear_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_.ClearToEmpty();
}
inline const std::string& OrderRequest::direction() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:match.OrderRequest.direction)
  return _internal_direction();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderRequest::set_direction(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:match.OrderRequest.direction)
}
inline std::string* OrderRequest::mutable_direction() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:match.OrderRequest.direction)
  return _s;
}
inline const std::string& OrderRequest::_internal_direction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.direction_.Get();
}
inline void OrderRequest::_internal_set_direction(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_.Set(value, GetArena());
}
inline std::string* OrderRequest::_internal_mutable_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.direction_.Mutable( GetArena());
}
inline std::string* OrderRequest::release_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:match.OrderRequest.direction)
  return _impl_.direction_.Release();
}
inline void OrderRequest::set_allocated_direction(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.direction_.IsDefault()) {
    _impl_.direction_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:match.OrderRequest.direction)
}

// optional string ordertype = 7;
inline bool OrderRequest::has_ordertype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void OrderRequest::clear_ordertype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ordertype_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& OrderRequest::ordertype() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:match.OrderRequest.ordertype)
  return _internal_ordertype();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderRequest::set_ordertype(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ordertype_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:match.OrderRequest.ordertype)
}
inline std::string* OrderRequest::mutable_ordertype() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ordertype();
  // @@protoc_insertion_point(field_mutable:match.OrderRequest.ordertype)
  return _s;
}
inline const std::string& OrderRequest::_internal_ordertype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ordertype_.Get();
}
inline void OrderRequest::_internal_set_ordertype(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ordertype_.Set(value, GetArena());
}
inline std::string* OrderRequest::_internal_mutable_ordertype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.ordertype_.Mutable( GetArena());
}
inline std::string* OrderRequest::release_ordertype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:match.OrderRequest.ordertype)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.ordertype_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.ordertype_.Set("", GetArena());
  }
  return released;
}
inline void OrderRequest::set_allocated_ordertype(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.ordertype_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ordertype_.IsDefault()) {
    _impl_.ordertype_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:match.OrderRequest.ordertype)
}

// optional string tif = 8;
inline bool OrderRequest::has_tif() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void OrderRequest::clear_tif() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tif_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& OrderRequest::tif() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:match.OrderRequest.tif)
  return _internal_tif();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderRequest::set_tif(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.tif_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:match.OrderRequest.tif)
}
inline std::string* OrderRequest::mutable_tif() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tif();
  // @@protoc_insertion_point(field_mutable:match.OrderRequest.tif)
  return _s;
}
inline const std::string& OrderRequest::_internal_tif() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tif_.Get();
}
inline void OrderRequest::_internal_set_tif(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.tif_.Set(value, GetArena());
}
inline std::string* OrderRequest::_internal_mutable_tif() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.tif_.Mutable( GetArena());
}
inline std::string* OrderRequest::release_tif() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:match.OrderRequest.tif)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.tif_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.tif_.Set("", GetArena());
  }
  return released;
}
inline void OrderRequest::set_allocated_tif(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.tif_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.tif_.IsDefault()) {
    _impl_.tif_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:match.OrderRequest.tif)
}

// optional double trigger_price = 9;
inline bool OrderRequest::has_trigger_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void OrderRequest::clear_trigger_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trigger_price_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double OrderRequest::trigger_price() const {
  // @@protoc_insertion_point(field_get:match.OrderRequest.trigger_price)
  return _internal_trigger_price();
}
inline void OrderRequest::set_trigger_price(double value) {
  _internal_set_trigger_price(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:match.OrderRequest.trigger_price)
}
inline double OrderRequest::_internal_trigger_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.trigger_price_;
}
inline void OrderRequest::_internal_set_trigger_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trigger_price_ = value;
}

// -------------------------------------------------------------------

// Trade

// string makerOrderId = 1;
inline void Trade::clear_makerorderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.makerorderid_.ClearToEmpty();
}
inline const std::string& Trade::makerorderid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:match.Trade.makerOrderId)
  return _internal_makerorderid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Trade::set_makerorderid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.makerorderid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:match.Trade.makerOrderId)
}
inline std::string* Trade::mutable_makerorderid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_makerorderid();
  // @@protoc_insertion_point(field_mutable:match.Trade.makerOrderId)
  return _s;
}
inline const std::string& Trade::_internal_makerorderid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.makerorderid_.Get();
}
inline void Trade::_internal_set_makerorderid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.makerorderid_.Set(value, GetArena());
}
inline std::string* Trade::_internal_mutable_makerorderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.makerorderid_.Mutable( GetArena());
}
inline std::string* Trade::release_makerorderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:match.Trade.makerOrderId)
  return _impl_.makerorderid_.Release();
}
inline void Trade::set_allocated_makerorderid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.makerorderid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.makerorderid_.IsDefault()) {
    _impl_.makerorderid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:match.Trade.makerOrderId)
}

// string takerOrderId = 2;
inline void Trade::clear_takerorderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.takerorderid_.ClearToEmpty();
}
inline const std::string& Trade::takerorderid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:match.Trade.takerOrderId)
  return _internal_takerorderid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Trade::set_takerorderid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.takerorderid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:match.Trade.takerOrderId)
}
inline std::string* Trade::mutable_takerorderid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_takerorderid();
  // @@protoc_insertion_point(field_mutable:match.Trade.takerOrderId)
  return _s;
}
inline const std::string& Trade::_internal_takerorderid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.takerorderid_.Get();
}
inline void Trade::_internal_set_takerorderid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.takerorderid_.Set(value, GetArena());
}
inline std::string* Trade::_internal_mutable_takerorderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.takerorderid_.Mutable( GetArena());
}
inline std::string* Trade::release_takerorderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:match.Trade.takerOrderId)
  return _impl_.takerorderid_.Release();
}
inline void Trade::set_allocated_takerorderid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.takerorderid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.takerorderid_.IsDefault()) {
    _impl_.takerorderid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:match.Trade.takerOrderId)
}

// string symbol = 3;
inline void Trade::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& Trade::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:match.Trade.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Trade::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:match.Trade.symbol)
}
inline std::string* Trade::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:match.Trade.symbol)
  return _s;
}
inline const std::string& Trade::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void Trade::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* Trade::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* Trade::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:match.Trade.symbol)
  return _impl_.symbol_.Release();
}
inline void Trade::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:match.Trade.symbol)
}

// double price = 4;
inline void Trade::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
}
inline double Trade::price() const {
  // @@protoc_insertion_point(field_get:match.Trade.price)
  return _internal_price();
}
inline void Trade::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:match.Trade.price)
}
inline double Trade::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void Trade::_internal_set_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// double quantity = 5;
inline void Trade::clear_quantity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = 0;
}
inline double Trade::quantity() const {
  // @@protoc_insertion_point(field_get:match.Trade.quantity)
  return _internal_quantity();
}
inline void Trade::set_quantity(double value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:match.Trade.quantity)
}
inline double Trade::_internal_quantity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quantity_;
}
inline void Trade::_internal_set_quantity(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = value;
}

// string timestamp = 6;
inline void Trade::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& Trade::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:match.Trade.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Trade::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:match.Trade.timestamp)
}
inline std::string* Trade::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:match.Trade.timestamp)
  return _s;
}
inline const std::string& Trade::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void Trade::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* Trade::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* Trade::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:match.Trade.timestamp)
  return _impl_.timestamp_.Release();
}
inline void Trade::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:match.Trade.timestamp)
}

// -------------------------------------------------------------------

// TradeResponse

// repeated .match.Trade trades = 1;
inline int TradeResponse::_internal_trades_size() const {
  return _internal_trades().size();
}
inline int TradeResponse::trades_size() const {
  return _internal_trades_size();
}
inline void TradeResponse::clear_trades() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trades_.Clear();
}
inline ::match::Trade* TradeResponse::mutable_trades(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:match.TradeResponse.trades)
  return _internal_mutable_trades()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::match::Trade>* TradeResponse::mutable_trades()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:match.TradeResponse.trades)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_trades();
}
inline const ::match::Trade& TradeResponse::trades(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:match.TradeResponse.trades)
  return _internal_trades().Get(index);
}
inline ::match::Trade* TradeResponse::add_trades() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::match::Trade* _add = _internal_mutable_trades()->Add();
  // @@protoc_insertion_point(field_add:match.TradeResponse.trades)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::match::Trade>& TradeResponse::trades() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:match.TradeResponse.trades)
  return _internal_trades();
}
inline const ::google::protobuf::RepeatedPtrField<::match::Trade>&
TradeResponse::_internal_trades() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.trades_;
}
inline ::google::protobuf::RepeatedPtrField<::match::Trade>*
TradeResponse::_internal_mutable_trades() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.trades_;
}

// -------------------------------------------------------------------

// CancelRequest

// string symbol = 1;
inline void CancelRequest::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& CancelRequest::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:match.CancelRequest.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CancelRequest::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:match.CancelRequest.symbol)
}
inline std::string* CancelRequest::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:match.CancelRequest.symbol)
  return _s;
}
inline const std::string& CancelRequest::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void CancelRequest::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* CancelRequest::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* CancelRequest::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:match.CancelRequest.symbol)
  return _impl_.symbol_.Release();
}
inline void CancelRequest::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:match.CancelRequest.symbol)
}

// string orderId = 2;
inline void CancelRequest::clear_orderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orderid_.ClearToEmpty();
}
inline const std::string& CancelRequest::orderid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:match.CancelRequest.orderId)
  return _internal_orderid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CancelRequest::set_orderid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orderid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:match.CancelRequest.orderId)
}
inline std::string* CancelRequest::mutable_orderid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_orderid();
  // @@protoc_insertion_point(field_mutable:match.CancelRequest.orderId)
  return _s;
}
inline const std::string& CancelRequest::_internal_orderid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.orderid_.Get();
}
inline void CancelRequest::_internal_set_orderid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orderid_.Set(value, GetArena());
}
inline std::string* CancelRequest::_internal_mutable_orderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.orderid_.Mutable( GetArena());
}
inline std::string* CancelRequest::release_orderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:match.CancelRequest.orderId)
  return _impl_.orderid_.Release();
}
inline void CancelRequest::set_allocated_orderid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orderid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.orderid_.IsDefault()) {
    _impl_.orderid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:match.CancelRequest.orderId)
}

// -------------------------------------------------------------------

// CancelResponse

// bool success = 1;
inline void CancelResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool CancelResponse::success() const {
  // @@protoc_insertion_point(field_get:match.CancelResponse.success)
  return _internal_success();
}
inline void CancelResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:match.CancelResponse.success)
}
inline bool CancelResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void CancelResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// ModifyRequest

// optional string orderId = 1;
inline bool ModifyRequest::has_orderid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ModifyRequest::clear_orderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orderid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModifyRequest::orderid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:match.ModifyRequest.orderId)
  return _internal_orderid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModifyRequest::set_orderid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.orderid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:match.ModifyRequest.orderId)
}
inline std::string* ModifyRequest::mutable_orderid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_orderid();
  // @@protoc_insertion_point(field_mutable:match.ModifyRequest.orderId)
  return _s;
}
inline const std::string& ModifyRequest::_internal_orderid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.orderid_.Get();
}
inline void ModifyRequest::_internal_set_orderid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.orderid_.Set(value, GetArena());
}
inline std::string* ModifyRequest::_internal_mutable_orderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.orderid_.Mutable( GetArena());
}
inline std::string* ModifyRequest::release_orderid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:match.ModifyRequest.orderId)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.orderid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.orderid_.Set("", GetArena());
  }
  return released;
}
inline void ModifyRequest::set_allocated_orderid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.orderid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.orderid_.IsDefault()) {
    _impl_.orderid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:match.ModifyRequest.orderId)
}

// optional string userId = 2;
inline bool ModifyRequest::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ModifyRequest::clear_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModifyRequest::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:match.ModifyRequest.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModifyRequest::set_userid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:match.ModifyRequest.userId)
}
inline std::string* ModifyRequest::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:match.ModifyRequest.userId)
  return _s;
}
inline const std::string& ModifyRequest::_internal_userid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.userid_.Get();
}
inline void ModifyRequest::_internal_set_userid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* ModifyRequest::_internal_mutable_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* ModifyRequest::release_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:match.ModifyRequest.userId)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.userid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.userid_.Set("", GetArena());
  }
  return released;
}
inline void ModifyRequest::set_allocated_userid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.userid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:match.ModifyRequest.userId)
}

// string symbol = 3;
inline void ModifyRequest::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& ModifyRequest::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:match.ModifyRequest.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModifyRequest::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:match.ModifyRequest.symbol)
}
inline std::string* ModifyRequest::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:match.ModifyRequest.symbol)
  return _s;
}
inline const std::string& ModifyRequest::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void ModifyRequest::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* ModifyRequest::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* ModifyRequest::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:match.ModifyRequest.symbol)
  return _impl_.symbol_.Release();
}
inline void ModifyRequest::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:match.ModifyRequest.symbol)
}

// double new_price = 4;
inline void ModifyRequest::clear_new_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_price_ = 0;
}
inline double ModifyRequest::new_price() const {
  // @@protoc_insertion_point(field_get:match.ModifyRequest.new_price)
  return _internal_new_price();
}
inline void ModifyRequest::set_new_price(double value) {
  _internal_set_new_price(value);
  // @@protoc_insertion_point(field_set:match.ModifyRequest.new_price)
}
inline double ModifyRequest::_internal_new_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_price_;
}
inline void ModifyRequest::_internal_set_new_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_price_ = value;
}

// double new_quantity = 5;
inline void ModifyRequest::clear_new_quantity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_quantity_ = 0;
}
inline double ModifyRequest::new_quantity() const {
  // @@protoc_insertion_point(field_get:match.ModifyRequest.new_quantity)
  return _internal_new_quantity();
}
inline void ModifyRequest::set_new_quantity(double value) {
  _internal_set_new_quantity(value);
  // @@protoc_insertion_point(field_set:match.ModifyRequest.new_quantity)
}
inline double ModifyRequest::_internal_new_quantity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_quantity_;
}
inline void ModifyRequest::_internal_set_new_quantity(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_quantity_ = value;
}

// string direction = 6;
inline void ModifyRequest::clear_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_.ClearToEmpty();
}
inline const std::string& ModifyRequest::direction() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:match.ModifyRequest.direction)
  return _internal_direction();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModifyRequest::set_direction(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:match.ModifyRequest.direction)
}
inline std::string* ModifyRequest::mutable_direction() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:match.ModifyRequest.direction)
  return _s;
}
inline const std::string& ModifyRequest::_internal_direction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.direction_.Get();
}
inline void ModifyRequest::_internal_set_direction(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_.Set(value, GetArena());
}
inline std::string* ModifyRequest::_internal_mutable_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.direction_.Mutable( GetArena());
}
inline std::string* ModifyRequest::release_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:match.ModifyRequest.direction)
  return _impl_.direction_.Release();
}
inline void ModifyRequest::set_allocated_direction(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.direction_.IsDefault()) {
    _impl_.direction_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:match.ModifyRequest.direction)
}

// -------------------------------------------------------------------

// ModifyResponse

// bool success = 1;
inline void ModifyResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool ModifyResponse::success() const {
  // @@protoc_insertion_point(field_get:match.ModifyResponse.success)
  return _internal_success();
}
inline void ModifyResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:match.ModifyResponse.success)
}
inline bool ModifyResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void ModifyResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace match


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // match_2eproto_2epb_2eh
