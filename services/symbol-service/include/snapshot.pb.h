// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: snapshot.proto
// Protobuf C++ Version: 5.29.3

#ifndef snapshot_2eproto_2epb_2eh
#define snapshot_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_snapshot_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_snapshot_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_snapshot_2eproto;
namespace snapshot {
class L1SnapshotResponse;
struct L1SnapshotResponseDefaultTypeInternal;
extern L1SnapshotResponseDefaultTypeInternal _L1SnapshotResponse_default_instance_;
class PriceLevel;
struct PriceLevelDefaultTypeInternal;
extern PriceLevelDefaultTypeInternal _PriceLevel_default_instance_;
class SymbolRequest;
struct SymbolRequestDefaultTypeInternal;
extern SymbolRequestDefaultTypeInternal _SymbolRequest_default_instance_;
}  // namespace snapshot
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace snapshot {

// ===================================================================


// -------------------------------------------------------------------

class SymbolRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:snapshot.SymbolRequest) */ {
 public:
  inline SymbolRequest() : SymbolRequest(nullptr) {}
  ~SymbolRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SymbolRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SymbolRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SymbolRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SymbolRequest(const SymbolRequest& from) : SymbolRequest(nullptr, from) {}
  inline SymbolRequest(SymbolRequest&& from) noexcept
      : SymbolRequest(nullptr, std::move(from)) {}
  inline SymbolRequest& operator=(const SymbolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SymbolRequest& operator=(SymbolRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SymbolRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SymbolRequest* internal_default_instance() {
    return reinterpret_cast<const SymbolRequest*>(
        &_SymbolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SymbolRequest& a, SymbolRequest& b) { a.Swap(&b); }
  inline void Swap(SymbolRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SymbolRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SymbolRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SymbolRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SymbolRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SymbolRequest& from) { SymbolRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SymbolRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "snapshot.SymbolRequest"; }

 protected:
  explicit SymbolRequest(::google::protobuf::Arena* arena);
  SymbolRequest(::google::protobuf::Arena* arena, const SymbolRequest& from);
  SymbolRequest(::google::protobuf::Arena* arena, SymbolRequest&& from) noexcept
      : SymbolRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 1,
  };
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // @@protoc_insertion_point(class_scope:snapshot.SymbolRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SymbolRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_snapshot_2eproto;
};
// -------------------------------------------------------------------

class PriceLevel final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:snapshot.PriceLevel) */ {
 public:
  inline PriceLevel() : PriceLevel(nullptr) {}
  ~PriceLevel() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PriceLevel* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PriceLevel));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PriceLevel(
      ::google::protobuf::internal::ConstantInitialized);

  inline PriceLevel(const PriceLevel& from) : PriceLevel(nullptr, from) {}
  inline PriceLevel(PriceLevel&& from) noexcept
      : PriceLevel(nullptr, std::move(from)) {}
  inline PriceLevel& operator=(const PriceLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceLevel& operator=(PriceLevel&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PriceLevel& default_instance() {
    return *internal_default_instance();
  }
  static inline const PriceLevel* internal_default_instance() {
    return reinterpret_cast<const PriceLevel*>(
        &_PriceLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PriceLevel& a, PriceLevel& b) { a.Swap(&b); }
  inline void Swap(PriceLevel* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceLevel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PriceLevel* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PriceLevel>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PriceLevel& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PriceLevel& from) { PriceLevel::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PriceLevel* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "snapshot.PriceLevel"; }

 protected:
  explicit PriceLevel(::google::protobuf::Arena* arena);
  PriceLevel(::google::protobuf::Arena* arena, const PriceLevel& from);
  PriceLevel(::google::protobuf::Arena* arena, PriceLevel&& from) noexcept
      : PriceLevel(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPriceFieldNumber = 1,
    kQtyFieldNumber = 2,
  };
  // double price = 1;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // double qty = 2;
  void clear_qty() ;
  double qty() const;
  void set_qty(double value);

  private:
  double _internal_qty() const;
  void _internal_set_qty(double value);

  public:
  // @@protoc_insertion_point(class_scope:snapshot.PriceLevel)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PriceLevel& from_msg);
    double price_;
    double qty_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_snapshot_2eproto;
};
// -------------------------------------------------------------------

class L1SnapshotResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:snapshot.L1SnapshotResponse) */ {
 public:
  inline L1SnapshotResponse() : L1SnapshotResponse(nullptr) {}
  ~L1SnapshotResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(L1SnapshotResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(L1SnapshotResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR L1SnapshotResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline L1SnapshotResponse(const L1SnapshotResponse& from) : L1SnapshotResponse(nullptr, from) {}
  inline L1SnapshotResponse(L1SnapshotResponse&& from) noexcept
      : L1SnapshotResponse(nullptr, std::move(from)) {}
  inline L1SnapshotResponse& operator=(const L1SnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline L1SnapshotResponse& operator=(L1SnapshotResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const L1SnapshotResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const L1SnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const L1SnapshotResponse*>(
        &_L1SnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(L1SnapshotResponse& a, L1SnapshotResponse& b) { a.Swap(&b); }
  inline void Swap(L1SnapshotResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(L1SnapshotResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  L1SnapshotResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<L1SnapshotResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const L1SnapshotResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const L1SnapshotResponse& from) { L1SnapshotResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(L1SnapshotResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "snapshot.L1SnapshotResponse"; }

 protected:
  explicit L1SnapshotResponse(::google::protobuf::Arena* arena);
  L1SnapshotResponse(::google::protobuf::Arena* arena, const L1SnapshotResponse& from);
  L1SnapshotResponse(::google::protobuf::Arena* arena, L1SnapshotResponse&& from) noexcept
      : L1SnapshotResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 1,
    kTimestampFieldNumber = 4,
    kBidFieldNumber = 2,
    kAskFieldNumber = 3,
  };
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string timestamp = 4;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // .snapshot.PriceLevel bid = 2;
  bool has_bid() const;
  void clear_bid() ;
  const ::snapshot::PriceLevel& bid() const;
  PROTOBUF_NODISCARD ::snapshot::PriceLevel* release_bid();
  ::snapshot::PriceLevel* mutable_bid();
  void set_allocated_bid(::snapshot::PriceLevel* value);
  void unsafe_arena_set_allocated_bid(::snapshot::PriceLevel* value);
  ::snapshot::PriceLevel* unsafe_arena_release_bid();

  private:
  const ::snapshot::PriceLevel& _internal_bid() const;
  ::snapshot::PriceLevel* _internal_mutable_bid();

  public:
  // .snapshot.PriceLevel ask = 3;
  bool has_ask() const;
  void clear_ask() ;
  const ::snapshot::PriceLevel& ask() const;
  PROTOBUF_NODISCARD ::snapshot::PriceLevel* release_ask();
  ::snapshot::PriceLevel* mutable_ask();
  void set_allocated_ask(::snapshot::PriceLevel* value);
  void unsafe_arena_set_allocated_ask(::snapshot::PriceLevel* value);
  ::snapshot::PriceLevel* unsafe_arena_release_ask();

  private:
  const ::snapshot::PriceLevel& _internal_ask() const;
  ::snapshot::PriceLevel* _internal_mutable_ask();

  public:
  // @@protoc_insertion_point(class_scope:snapshot.L1SnapshotResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const L1SnapshotResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::snapshot::PriceLevel* bid_;
    ::snapshot::PriceLevel* ask_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_snapshot_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SymbolRequest

// string symbol = 1;
inline void SymbolRequest::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& SymbolRequest::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:snapshot.SymbolRequest.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SymbolRequest::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:snapshot.SymbolRequest.symbol)
}
inline std::string* SymbolRequest::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:snapshot.SymbolRequest.symbol)
  return _s;
}
inline const std::string& SymbolRequest::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void SymbolRequest::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* SymbolRequest::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* SymbolRequest::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:snapshot.SymbolRequest.symbol)
  return _impl_.symbol_.Release();
}
inline void SymbolRequest::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:snapshot.SymbolRequest.symbol)
}

// -------------------------------------------------------------------

// PriceLevel

// double price = 1;
inline void PriceLevel::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
}
inline double PriceLevel::price() const {
  // @@protoc_insertion_point(field_get:snapshot.PriceLevel.price)
  return _internal_price();
}
inline void PriceLevel::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:snapshot.PriceLevel.price)
}
inline double PriceLevel::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void PriceLevel::_internal_set_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// double qty = 2;
inline void PriceLevel::clear_qty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.qty_ = 0;
}
inline double PriceLevel::qty() const {
  // @@protoc_insertion_point(field_get:snapshot.PriceLevel.qty)
  return _internal_qty();
}
inline void PriceLevel::set_qty(double value) {
  _internal_set_qty(value);
  // @@protoc_insertion_point(field_set:snapshot.PriceLevel.qty)
}
inline double PriceLevel::_internal_qty() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.qty_;
}
inline void PriceLevel::_internal_set_qty(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.qty_ = value;
}

// -------------------------------------------------------------------

// L1SnapshotResponse

// string symbol = 1;
inline void L1SnapshotResponse::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& L1SnapshotResponse::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:snapshot.L1SnapshotResponse.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void L1SnapshotResponse::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:snapshot.L1SnapshotResponse.symbol)
}
inline std::string* L1SnapshotResponse::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:snapshot.L1SnapshotResponse.symbol)
  return _s;
}
inline const std::string& L1SnapshotResponse::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void L1SnapshotResponse::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* L1SnapshotResponse::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* L1SnapshotResponse::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:snapshot.L1SnapshotResponse.symbol)
  return _impl_.symbol_.Release();
}
inline void L1SnapshotResponse::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:snapshot.L1SnapshotResponse.symbol)
}

// .snapshot.PriceLevel bid = 2;
inline bool L1SnapshotResponse::has_bid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bid_ != nullptr);
  return value;
}
inline void L1SnapshotResponse::clear_bid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bid_ != nullptr) _impl_.bid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::snapshot::PriceLevel& L1SnapshotResponse::_internal_bid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::snapshot::PriceLevel* p = _impl_.bid_;
  return p != nullptr ? *p : reinterpret_cast<const ::snapshot::PriceLevel&>(::snapshot::_PriceLevel_default_instance_);
}
inline const ::snapshot::PriceLevel& L1SnapshotResponse::bid() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:snapshot.L1SnapshotResponse.bid)
  return _internal_bid();
}
inline void L1SnapshotResponse::unsafe_arena_set_allocated_bid(::snapshot::PriceLevel* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bid_);
  }
  _impl_.bid_ = reinterpret_cast<::snapshot::PriceLevel*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snapshot.L1SnapshotResponse.bid)
}
inline ::snapshot::PriceLevel* L1SnapshotResponse::release_bid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::snapshot::PriceLevel* released = _impl_.bid_;
  _impl_.bid_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::snapshot::PriceLevel* L1SnapshotResponse::unsafe_arena_release_bid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:snapshot.L1SnapshotResponse.bid)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::snapshot::PriceLevel* temp = _impl_.bid_;
  _impl_.bid_ = nullptr;
  return temp;
}
inline ::snapshot::PriceLevel* L1SnapshotResponse::_internal_mutable_bid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bid_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::snapshot::PriceLevel>(GetArena());
    _impl_.bid_ = reinterpret_cast<::snapshot::PriceLevel*>(p);
  }
  return _impl_.bid_;
}
inline ::snapshot::PriceLevel* L1SnapshotResponse::mutable_bid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::snapshot::PriceLevel* _msg = _internal_mutable_bid();
  // @@protoc_insertion_point(field_mutable:snapshot.L1SnapshotResponse.bid)
  return _msg;
}
inline void L1SnapshotResponse::set_allocated_bid(::snapshot::PriceLevel* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.bid_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.bid_ = reinterpret_cast<::snapshot::PriceLevel*>(value);
  // @@protoc_insertion_point(field_set_allocated:snapshot.L1SnapshotResponse.bid)
}

// .snapshot.PriceLevel ask = 3;
inline bool L1SnapshotResponse::has_ask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ask_ != nullptr);
  return value;
}
inline void L1SnapshotResponse::clear_ask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ask_ != nullptr) _impl_.ask_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::snapshot::PriceLevel& L1SnapshotResponse::_internal_ask() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::snapshot::PriceLevel* p = _impl_.ask_;
  return p != nullptr ? *p : reinterpret_cast<const ::snapshot::PriceLevel&>(::snapshot::_PriceLevel_default_instance_);
}
inline const ::snapshot::PriceLevel& L1SnapshotResponse::ask() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:snapshot.L1SnapshotResponse.ask)
  return _internal_ask();
}
inline void L1SnapshotResponse::unsafe_arena_set_allocated_ask(::snapshot::PriceLevel* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ask_);
  }
  _impl_.ask_ = reinterpret_cast<::snapshot::PriceLevel*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snapshot.L1SnapshotResponse.ask)
}
inline ::snapshot::PriceLevel* L1SnapshotResponse::release_ask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::snapshot::PriceLevel* released = _impl_.ask_;
  _impl_.ask_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::snapshot::PriceLevel* L1SnapshotResponse::unsafe_arena_release_ask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:snapshot.L1SnapshotResponse.ask)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::snapshot::PriceLevel* temp = _impl_.ask_;
  _impl_.ask_ = nullptr;
  return temp;
}
inline ::snapshot::PriceLevel* L1SnapshotResponse::_internal_mutable_ask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ask_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::snapshot::PriceLevel>(GetArena());
    _impl_.ask_ = reinterpret_cast<::snapshot::PriceLevel*>(p);
  }
  return _impl_.ask_;
}
inline ::snapshot::PriceLevel* L1SnapshotResponse::mutable_ask() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::snapshot::PriceLevel* _msg = _internal_mutable_ask();
  // @@protoc_insertion_point(field_mutable:snapshot.L1SnapshotResponse.ask)
  return _msg;
}
inline void L1SnapshotResponse::set_allocated_ask(::snapshot::PriceLevel* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.ask_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.ask_ = reinterpret_cast<::snapshot::PriceLevel*>(value);
  // @@protoc_insertion_point(field_set_allocated:snapshot.L1SnapshotResponse.ask)
}

// string timestamp = 4;
inline void L1SnapshotResponse::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& L1SnapshotResponse::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:snapshot.L1SnapshotResponse.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void L1SnapshotResponse::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:snapshot.L1SnapshotResponse.timestamp)
}
inline std::string* L1SnapshotResponse::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:snapshot.L1SnapshotResponse.timestamp)
  return _s;
}
inline const std::string& L1SnapshotResponse::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void L1SnapshotResponse::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* L1SnapshotResponse::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* L1SnapshotResponse::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:snapshot.L1SnapshotResponse.timestamp)
  return _impl_.timestamp_.Release();
}
inline void L1SnapshotResponse::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:snapshot.L1SnapshotResponse.timestamp)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace snapshot


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // snapshot_2eproto_2epb_2eh
