// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: match.proto

#include "match.pb.h"
#include "match.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace match {

static const char* MatchEngine_method_names[] = {
  "/match.MatchEngine/SubmitOrder",
  "/match.MatchEngine/CancelOrder",
  "/match.MatchEngine/ModifyOrder",
};

std::unique_ptr< MatchEngine::Stub> MatchEngine::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MatchEngine::Stub> stub(new MatchEngine::Stub(channel, options));
  return stub;
}

MatchEngine::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SubmitOrder_(MatchEngine_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelOrder_(MatchEngine_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModifyOrder_(MatchEngine_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MatchEngine::Stub::SubmitOrder(::grpc::ClientContext* context, const ::match::OrderRequest& request, ::match::TradeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::match::OrderRequest, ::match::TradeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitOrder_, context, request, response);
}

void MatchEngine::Stub::async::SubmitOrder(::grpc::ClientContext* context, const ::match::OrderRequest* request, ::match::TradeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::match::OrderRequest, ::match::TradeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitOrder_, context, request, response, std::move(f));
}

void MatchEngine::Stub::async::SubmitOrder(::grpc::ClientContext* context, const ::match::OrderRequest* request, ::match::TradeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::match::TradeResponse>* MatchEngine::Stub::PrepareAsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::match::OrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::match::TradeResponse, ::match::OrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::match::TradeResponse>* MatchEngine::Stub::AsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::match::OrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MatchEngine::Stub::CancelOrder(::grpc::ClientContext* context, const ::match::CancelRequest& request, ::match::CancelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::match::CancelRequest, ::match::CancelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelOrder_, context, request, response);
}

void MatchEngine::Stub::async::CancelOrder(::grpc::ClientContext* context, const ::match::CancelRequest* request, ::match::CancelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::match::CancelRequest, ::match::CancelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, std::move(f));
}

void MatchEngine::Stub::async::CancelOrder(::grpc::ClientContext* context, const ::match::CancelRequest* request, ::match::CancelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::match::CancelResponse>* MatchEngine::Stub::PrepareAsyncCancelOrderRaw(::grpc::ClientContext* context, const ::match::CancelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::match::CancelResponse, ::match::CancelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::match::CancelResponse>* MatchEngine::Stub::AsyncCancelOrderRaw(::grpc::ClientContext* context, const ::match::CancelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MatchEngine::Stub::ModifyOrder(::grpc::ClientContext* context, const ::match::ModifyRequest& request, ::match::ModifyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::match::ModifyRequest, ::match::ModifyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModifyOrder_, context, request, response);
}

void MatchEngine::Stub::async::ModifyOrder(::grpc::ClientContext* context, const ::match::ModifyRequest* request, ::match::ModifyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::match::ModifyRequest, ::match::ModifyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModifyOrder_, context, request, response, std::move(f));
}

void MatchEngine::Stub::async::ModifyOrder(::grpc::ClientContext* context, const ::match::ModifyRequest* request, ::match::ModifyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModifyOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::match::ModifyResponse>* MatchEngine::Stub::PrepareAsyncModifyOrderRaw(::grpc::ClientContext* context, const ::match::ModifyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::match::ModifyResponse, ::match::ModifyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModifyOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::match::ModifyResponse>* MatchEngine::Stub::AsyncModifyOrderRaw(::grpc::ClientContext* context, const ::match::ModifyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModifyOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

MatchEngine::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MatchEngine_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MatchEngine::Service, ::match::OrderRequest, ::match::TradeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MatchEngine::Service* service,
             ::grpc::ServerContext* ctx,
             const ::match::OrderRequest* req,
             ::match::TradeResponse* resp) {
               return service->SubmitOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MatchEngine_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MatchEngine::Service, ::match::CancelRequest, ::match::CancelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MatchEngine::Service* service,
             ::grpc::ServerContext* ctx,
             const ::match::CancelRequest* req,
             ::match::CancelResponse* resp) {
               return service->CancelOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MatchEngine_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MatchEngine::Service, ::match::ModifyRequest, ::match::ModifyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MatchEngine::Service* service,
             ::grpc::ServerContext* ctx,
             const ::match::ModifyRequest* req,
             ::match::ModifyResponse* resp) {
               return service->ModifyOrder(ctx, req, resp);
             }, this)));
}

MatchEngine::Service::~Service() {
}

::grpc::Status MatchEngine::Service::SubmitOrder(::grpc::ServerContext* context, const ::match::OrderRequest* request, ::match::TradeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MatchEngine::Service::CancelOrder(::grpc::ServerContext* context, const ::match::CancelRequest* request, ::match::CancelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MatchEngine::Service::ModifyOrder(::grpc::ServerContext* context, const ::match::ModifyRequest* request, ::match::ModifyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace match
#include <grpcpp/ports_undef.inc>

