// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: accounting.proto
#ifndef GRPC_accounting_2eproto__INCLUDED
#define GRPC_accounting_2eproto__INCLUDED

#include "accounting.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace accounting {

class AccountingService final {
 public:
  static constexpr char const* service_full_name() {
    return "accounting.AccountingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ApplyFunding(::grpc::ClientContext* context, const ::accounting::FundingRequest& request, ::accounting::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounting::Ack>> AsyncApplyFunding(::grpc::ClientContext* context, const ::accounting::FundingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounting::Ack>>(AsyncApplyFundingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounting::Ack>> PrepareAsyncApplyFunding(::grpc::ClientContext* context, const ::accounting::FundingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounting::Ack>>(PrepareAsyncApplyFundingRaw(context, request, cq));
    }
    virtual ::grpc::Status RecordPnL(::grpc::ClientContext* context, const ::accounting::PnLRequest& request, ::accounting::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounting::Ack>> AsyncRecordPnL(::grpc::ClientContext* context, const ::accounting::PnLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounting::Ack>>(AsyncRecordPnLRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounting::Ack>> PrepareAsyncRecordPnL(::grpc::ClientContext* context, const ::accounting::PnLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::accounting::Ack>>(PrepareAsyncRecordPnLRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ApplyFunding(::grpc::ClientContext* context, const ::accounting::FundingRequest* request, ::accounting::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ApplyFunding(::grpc::ClientContext* context, const ::accounting::FundingRequest* request, ::accounting::Ack* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RecordPnL(::grpc::ClientContext* context, const ::accounting::PnLRequest* request, ::accounting::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RecordPnL(::grpc::ClientContext* context, const ::accounting::PnLRequest* request, ::accounting::Ack* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounting::Ack>* AsyncApplyFundingRaw(::grpc::ClientContext* context, const ::accounting::FundingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounting::Ack>* PrepareAsyncApplyFundingRaw(::grpc::ClientContext* context, const ::accounting::FundingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounting::Ack>* AsyncRecordPnLRaw(::grpc::ClientContext* context, const ::accounting::PnLRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::accounting::Ack>* PrepareAsyncRecordPnLRaw(::grpc::ClientContext* context, const ::accounting::PnLRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ApplyFunding(::grpc::ClientContext* context, const ::accounting::FundingRequest& request, ::accounting::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounting::Ack>> AsyncApplyFunding(::grpc::ClientContext* context, const ::accounting::FundingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounting::Ack>>(AsyncApplyFundingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounting::Ack>> PrepareAsyncApplyFunding(::grpc::ClientContext* context, const ::accounting::FundingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounting::Ack>>(PrepareAsyncApplyFundingRaw(context, request, cq));
    }
    ::grpc::Status RecordPnL(::grpc::ClientContext* context, const ::accounting::PnLRequest& request, ::accounting::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounting::Ack>> AsyncRecordPnL(::grpc::ClientContext* context, const ::accounting::PnLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounting::Ack>>(AsyncRecordPnLRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounting::Ack>> PrepareAsyncRecordPnL(::grpc::ClientContext* context, const ::accounting::PnLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::accounting::Ack>>(PrepareAsyncRecordPnLRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ApplyFunding(::grpc::ClientContext* context, const ::accounting::FundingRequest* request, ::accounting::Ack* response, std::function<void(::grpc::Status)>) override;
      void ApplyFunding(::grpc::ClientContext* context, const ::accounting::FundingRequest* request, ::accounting::Ack* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RecordPnL(::grpc::ClientContext* context, const ::accounting::PnLRequest* request, ::accounting::Ack* response, std::function<void(::grpc::Status)>) override;
      void RecordPnL(::grpc::ClientContext* context, const ::accounting::PnLRequest* request, ::accounting::Ack* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::accounting::Ack>* AsyncApplyFundingRaw(::grpc::ClientContext* context, const ::accounting::FundingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounting::Ack>* PrepareAsyncApplyFundingRaw(::grpc::ClientContext* context, const ::accounting::FundingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounting::Ack>* AsyncRecordPnLRaw(::grpc::ClientContext* context, const ::accounting::PnLRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::accounting::Ack>* PrepareAsyncRecordPnLRaw(::grpc::ClientContext* context, const ::accounting::PnLRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ApplyFunding_;
    const ::grpc::internal::RpcMethod rpcmethod_RecordPnL_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ApplyFunding(::grpc::ServerContext* context, const ::accounting::FundingRequest* request, ::accounting::Ack* response);
    virtual ::grpc::Status RecordPnL(::grpc::ServerContext* context, const ::accounting::PnLRequest* request, ::accounting::Ack* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ApplyFunding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ApplyFunding() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ApplyFunding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyFunding(::grpc::ServerContext* /*context*/, const ::accounting::FundingRequest* /*request*/, ::accounting::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApplyFunding(::grpc::ServerContext* context, ::accounting::FundingRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounting::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecordPnL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecordPnL() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RecordPnL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordPnL(::grpc::ServerContext* /*context*/, const ::accounting::PnLRequest* /*request*/, ::accounting::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordPnL(::grpc::ServerContext* context, ::accounting::PnLRequest* request, ::grpc::ServerAsyncResponseWriter< ::accounting::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ApplyFunding<WithAsyncMethod_RecordPnL<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ApplyFunding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ApplyFunding() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::accounting::FundingRequest, ::accounting::Ack>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::accounting::FundingRequest* request, ::accounting::Ack* response) { return this->ApplyFunding(context, request, response); }));}
    void SetMessageAllocatorFor_ApplyFunding(
        ::grpc::MessageAllocator< ::accounting::FundingRequest, ::accounting::Ack>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::accounting::FundingRequest, ::accounting::Ack>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ApplyFunding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyFunding(::grpc::ServerContext* /*context*/, const ::accounting::FundingRequest* /*request*/, ::accounting::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ApplyFunding(
      ::grpc::CallbackServerContext* /*context*/, const ::accounting::FundingRequest* /*request*/, ::accounting::Ack* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RecordPnL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RecordPnL() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::accounting::PnLRequest, ::accounting::Ack>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::accounting::PnLRequest* request, ::accounting::Ack* response) { return this->RecordPnL(context, request, response); }));}
    void SetMessageAllocatorFor_RecordPnL(
        ::grpc::MessageAllocator< ::accounting::PnLRequest, ::accounting::Ack>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::accounting::PnLRequest, ::accounting::Ack>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RecordPnL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordPnL(::grpc::ServerContext* /*context*/, const ::accounting::PnLRequest* /*request*/, ::accounting::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordPnL(
      ::grpc::CallbackServerContext* /*context*/, const ::accounting::PnLRequest* /*request*/, ::accounting::Ack* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ApplyFunding<WithCallbackMethod_RecordPnL<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ApplyFunding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ApplyFunding() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ApplyFunding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyFunding(::grpc::ServerContext* /*context*/, const ::accounting::FundingRequest* /*request*/, ::accounting::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecordPnL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecordPnL() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RecordPnL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordPnL(::grpc::ServerContext* /*context*/, const ::accounting::PnLRequest* /*request*/, ::accounting::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ApplyFunding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ApplyFunding() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ApplyFunding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyFunding(::grpc::ServerContext* /*context*/, const ::accounting::FundingRequest* /*request*/, ::accounting::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApplyFunding(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecordPnL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecordPnL() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RecordPnL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordPnL(::grpc::ServerContext* /*context*/, const ::accounting::PnLRequest* /*request*/, ::accounting::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordPnL(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ApplyFunding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ApplyFunding() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ApplyFunding(context, request, response); }));
    }
    ~WithRawCallbackMethod_ApplyFunding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyFunding(::grpc::ServerContext* /*context*/, const ::accounting::FundingRequest* /*request*/, ::accounting::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ApplyFunding(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RecordPnL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RecordPnL() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecordPnL(context, request, response); }));
    }
    ~WithRawCallbackMethod_RecordPnL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordPnL(::grpc::ServerContext* /*context*/, const ::accounting::PnLRequest* /*request*/, ::accounting::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordPnL(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ApplyFunding : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ApplyFunding() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::accounting::FundingRequest, ::accounting::Ack>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::accounting::FundingRequest, ::accounting::Ack>* streamer) {
                       return this->StreamedApplyFunding(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ApplyFunding() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ApplyFunding(::grpc::ServerContext* /*context*/, const ::accounting::FundingRequest* /*request*/, ::accounting::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedApplyFunding(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounting::FundingRequest,::accounting::Ack>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecordPnL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecordPnL() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::accounting::PnLRequest, ::accounting::Ack>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::accounting::PnLRequest, ::accounting::Ack>* streamer) {
                       return this->StreamedRecordPnL(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecordPnL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecordPnL(::grpc::ServerContext* /*context*/, const ::accounting::PnLRequest* /*request*/, ::accounting::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecordPnL(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::accounting::PnLRequest,::accounting::Ack>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ApplyFunding<WithStreamedUnaryMethod_RecordPnL<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ApplyFunding<WithStreamedUnaryMethod_RecordPnL<Service > > StreamedService;
};

}  // namespace accounting


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_accounting_2eproto__INCLUDED
