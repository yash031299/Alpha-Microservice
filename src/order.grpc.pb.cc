// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: order.proto

#include "order.pb.h"
#include "order.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace order {

static const char* OrderService_method_names[] = {
  "/order.OrderService/SubmitOrder",
  "/order.OrderService/CheckHealth",
  "/order.OrderService/CancelOrder",
  "/order.OrderService/ModifyOrder",
};

std::unique_ptr< OrderService::Stub> OrderService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OrderService::Stub> stub(new OrderService::Stub(channel, options));
  return stub;
}

OrderService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SubmitOrder_(OrderService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckHealth_(OrderService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelOrder_(OrderService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModifyOrder_(OrderService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OrderService::Stub::SubmitOrder(::grpc::ClientContext* context, const ::order::OrderRequest& request, ::order::OrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::order::OrderRequest, ::order::OrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitOrder_, context, request, response);
}

void OrderService::Stub::async::SubmitOrder(::grpc::ClientContext* context, const ::order::OrderRequest* request, ::order::OrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::order::OrderRequest, ::order::OrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitOrder_, context, request, response, std::move(f));
}

void OrderService::Stub::async::SubmitOrder(::grpc::ClientContext* context, const ::order::OrderRequest* request, ::order::OrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::order::OrderResponse>* OrderService::Stub::PrepareAsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::order::OrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::order::OrderResponse, ::order::OrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::order::OrderResponse>* OrderService::Stub::AsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::order::OrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrderService::Stub::CheckHealth(::grpc::ClientContext* context, const ::order::HealthRequest& request, ::order::HealthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::order::HealthRequest, ::order::HealthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckHealth_, context, request, response);
}

void OrderService::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::order::HealthRequest* request, ::order::HealthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::order::HealthRequest, ::order::HealthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, std::move(f));
}

void OrderService::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::order::HealthRequest* request, ::order::HealthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::order::HealthResponse>* OrderService::Stub::PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::order::HealthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::order::HealthResponse, ::order::HealthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckHealth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::order::HealthResponse>* OrderService::Stub::AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::order::HealthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckHealthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrderService::Stub::CancelOrder(::grpc::ClientContext* context, const ::order::CancelRequest& request, ::order::CancelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::order::CancelRequest, ::order::CancelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelOrder_, context, request, response);
}

void OrderService::Stub::async::CancelOrder(::grpc::ClientContext* context, const ::order::CancelRequest* request, ::order::CancelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::order::CancelRequest, ::order::CancelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, std::move(f));
}

void OrderService::Stub::async::CancelOrder(::grpc::ClientContext* context, const ::order::CancelRequest* request, ::order::CancelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::order::CancelResponse>* OrderService::Stub::PrepareAsyncCancelOrderRaw(::grpc::ClientContext* context, const ::order::CancelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::order::CancelResponse, ::order::CancelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::order::CancelResponse>* OrderService::Stub::AsyncCancelOrderRaw(::grpc::ClientContext* context, const ::order::CancelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrderService::Stub::ModifyOrder(::grpc::ClientContext* context, const ::order::ModifyRequest& request, ::order::ModifyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::order::ModifyRequest, ::order::ModifyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModifyOrder_, context, request, response);
}

void OrderService::Stub::async::ModifyOrder(::grpc::ClientContext* context, const ::order::ModifyRequest* request, ::order::ModifyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::order::ModifyRequest, ::order::ModifyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModifyOrder_, context, request, response, std::move(f));
}

void OrderService::Stub::async::ModifyOrder(::grpc::ClientContext* context, const ::order::ModifyRequest* request, ::order::ModifyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModifyOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::order::ModifyResponse>* OrderService::Stub::PrepareAsyncModifyOrderRaw(::grpc::ClientContext* context, const ::order::ModifyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::order::ModifyResponse, ::order::ModifyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModifyOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::order::ModifyResponse>* OrderService::Stub::AsyncModifyOrderRaw(::grpc::ClientContext* context, const ::order::ModifyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModifyOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

OrderService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::order::OrderRequest, ::order::OrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::order::OrderRequest* req,
             ::order::OrderResponse* resp) {
               return service->SubmitOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::order::HealthRequest, ::order::HealthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::order::HealthRequest* req,
             ::order::HealthResponse* resp) {
               return service->CheckHealth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::order::CancelRequest, ::order::CancelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::order::CancelRequest* req,
             ::order::CancelResponse* resp) {
               return service->CancelOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::order::ModifyRequest, ::order::ModifyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::order::ModifyRequest* req,
             ::order::ModifyResponse* resp) {
               return service->ModifyOrder(ctx, req, resp);
             }, this)));
}

OrderService::Service::~Service() {
}

::grpc::Status OrderService::Service::SubmitOrder(::grpc::ServerContext* context, const ::order::OrderRequest* request, ::order::OrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderService::Service::CheckHealth(::grpc::ServerContext* context, const ::order::HealthRequest* request, ::order::HealthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderService::Service::CancelOrder(::grpc::ServerContext* context, const ::order::CancelRequest* request, ::order::CancelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderService::Service::ModifyOrder(::grpc::ServerContext* context, const ::order::ModifyRequest* request, ::order::ModifyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace order
#include <grpcpp/ports_undef.inc>

